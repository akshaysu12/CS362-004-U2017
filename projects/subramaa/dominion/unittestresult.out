--------------------- SMITHY CARD TEST ---------------------

------TESTING HAND SIZE -------
Expected Value: 8, ACTUAL VALUE: 9
HAND SIZE: TEST FAILED

------TESTING DECK SIZE -------
Expected Value: 2, ACTUAL VALUE: 0
DECK SIZE: TEST FAILED

------TESTING DISCARD SIZE -------
Expected Value: 1, ACTUAL VALUE: 0
DISCARD SIZE: TEST FAILED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

--------------------- ADVENTURER CARD TEST ---------------------

------TESTING HAND SIZE -------
Expected Value: 7, ACTUAL VALUE: 8
HAND SIZE: TEST FAILED

------TESTING DECK SIZE -------
DECK SIZE: TEST PASSED

------TESTING DISCARD SIZE -------
DISCARD SIZE: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

--------------------- COUNCIL ROOM CARD TEST ---------------------

------TESTING HAND SIZE -------
Expected Value: 9, ACTUAL VALUE: 8
HAND SIZE: TEST FAILED

------TESTING DECK SIZE -------
Expected Value: 1, ACTUAL VALUE: 1
DECK SIZE: TEST PASSED

------TESTING DISCARD SIZE -------
Expected Value: 1, ACTUAL VALUE: 0
DISCARD SIZE: TEST FAILED

------TESTING NUM BUYS -------
Expected Value: 2, ACTUAL VALUE: 2
NUM BUYS: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

--------------------- BARON CARD TEST ---------------------
----------TEST: DISCARD ESTATE CARD - CARD IN HAND---------------

------TESTING COIN INCREASE -------
Expected Value: 8, ACTUAL VALUE: 8
COIN INCREASE: TEST PASSED

------TESTING HAND SIZE -------
Expected Value: 4, ACTUAL VALUE: 4
HAND SIZE: TEST PASSED

------TESTING DISCARD SIZE -------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD SIZE: TEST PASSED

------TESTING DECK SIZE -------
Expected Value: 5, ACTUAL VALUE: 5
DECK SIZE: TEST PASSED

------TESTING ESTATE SUPPLY -------
Expected Value: 8, ACTUAL VALUE: 8
ESTATE SUPPLY: TEST PASSED
----------TEST: DISCARD ESTATE CARD - CARD NOT IN HAND---------------

------TESTING COINS -------
Expected Value: 4, ACTUAL VALUE: 4
COIN INCREASE: TEST PASSED

------TESTING HAND SIZE -------
Expected Value: 0, ACTUAL VALUE: 0
HAND SIZE: TEST PASSED

------TESTING DISCARD SIZE -------
Expected Value: 5, ACTUAL VALUE: 6
DISCARD SIZE: TEST FAILED

------TESTING DECK SIZE -------
Expected Value: 6, ACTUAL VALUE: 5
DECK SIZE: TEST FAILED

------TESTING TOP OF DECK FOR ESTATE CARD -------
DECK CARD: TEST FAILED

------TESTING ESTATE SUPPLY -------
Expected Value: 7, ACTUAL VALUE: 6
ESTATE SUPPLY: TEST FAILED
----------TEST: GAIN ESTATE CARD ---------------

------TESTING COINS -------
Expected Value: 4, ACTUAL VALUE: 4
COIN INCREASE: TEST PASSED

------TESTING HAND SIZE -------
Expected Value: 5, ACTUAL VALUE: 5
HAND SIZE: TEST FAILED

------TESTING DISCARD SIZE -------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD SIZE: TEST FAILED

------TESTING DECK SIZE -------
Expected Value: 6, ACTUAL VALUE: 5
DECK SIZE: TEST FAILED

------TESTING TOP OF DECK FOR ESTATE CARD -------
DECK CARD: TEST FAILED

------TESTING ESTATE SUPPLY -------
Expected Value: 7, ACTUAL VALUE: 6
ESTATE SUPPLY: TEST FAILED
--------------------- TEST IS GAME OVER FUNCTION TEST ---------------------

---TESTING END GAME FOR SUPPLYCOUNT 0, 1, 2, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 1, 2, 3, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 2, 3, 4, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 3, 4, 5, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 4, 5, 6, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 5, 6, 7, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 6, 7, 8, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 7, 8, 9, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 8, 9, 10, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 9, 10, 11, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 10, 11, 12, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 11, 12, 13, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 12, 13, 14, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 13, 14, 15, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 14, 15, 16, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 15, 16, 17, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 16, 17, 18, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 17, 18, 19, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 18, 19, 20, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 19, 20, 21, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 20, 21, 22, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 21, 22, 23, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 22, 23, 24, = 0 ----
END GAME: TEST PASSED
---TESTING END GAME FOR PROVINCE = 0 ----
END GAME: TEST PASSED
--------------------- TEST GAIN CARD FUNCTION TEST ---------------------

------TESTING EMPTY SUPPLY ------
Expected Value: -1, ACTUAL VALUE: -1
EMPTY SUPPLY GAIN CARD: TEST PASSED

-------------------TESTING CARD 0------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 1------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 2------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 3------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 4------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 5------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 6------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 7------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 8------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 9------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 10------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 11------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 12------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 13------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 14------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 15------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 16------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 17------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 18------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 19------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 20------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 21------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 22------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 23------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 24------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 25------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 26------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED
--------------------- DRAW END TURN FUNCTION TEST ---------------------

------TESTING DISCARD OF CARDS -------
#Cards Removed from Hand: 5, #Cards Removed added to Discard: 5
DISCARD SIZE: TEST PASSED
DISCARD CARD CHECK: TEST PASSED

------TESTING RETURN VAL -------
RETURN VAL CHECK: TEST PASSED

------TESTING TURN INCREMENT -------
TURN CHECK: TEST PASSED

------TESTING HANDS -------
HAND SIZE: TEST PASSED
HAND VALUES: TEST PASSED
HAND SIZE NEXT PLAYER: TEST PASSED

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

--------------------- DRAW CARD FUNCTION TEST ---------------------

------TESTING CASE 1: CARDS IN DECK TO DRAW FROM -------

------TESTING HAND SIZE -------
Expected Value: 6, ACTUAL VALUE: 6
HAND SIZE: TEST PASSED

------TESTING CARD -------
ADDED CORRECT CARD: TEST PASSED

------TESTING OTHER PLAYERS VALUES -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED


------TESTING CASE 2: NO CARDS IN DECK TO DRAW FROM -------

------TESTING HAND SIZE -------
Expected Value: 6, ACTUAL VALUE: 6
HAND SIZE: TEST PASSED

------TESTING DECK SIZE -------
Expected Value: 5, ACTUAL VALUE: 5
HAND SIZE: TEST PASSED

------TESTING OTHER PLAYERS VALUES -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

File 'dominion.c'
Lines executed:50.76% of 656
Branches executed:58.27% of 417
Taken at least once:39.81% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:25
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 7775 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
     7775:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 158
branch  1 taken 7617
      158:   10:    return 1;
     7617:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 2745
branch  1 taken 4872
     2745:   12:    return -1;
     4872:   13:  return 0;
     7775:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 262 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
      262:   44:  SelectStream(1);
      262:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      524:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 262
branch  1 taken 0
branch  2 taken 0
branch  3 taken 262
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      262:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     5764:   57:  for (i = 0; i < 10; i++)
branch  0 taken 2620
branch  1 taken 262
        -:   58:    {
    57640:   59:      for (j = 0; j < 10; j++)
branch  0 taken 26200
branch  1 taken 2620
        -:   60:        {
    49780:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 23580
branch  1 taken 2620
branch  2 taken 0
branch  3 taken 23580
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    26200:   65:        }
     2620:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      262:   73:  if (numPlayers == 2)
branch  0 taken 262
branch  1 taken 0
        -:   74:    {
      262:   75:      state->supplyCount[curse] = 10;
      262:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      262:   87:  if (numPlayers == 2)
branch  0 taken 262
branch  1 taken 0
        -:   88:    {
      262:   89:      state->supplyCount[estate] = 8;
      262:   90:      state->supplyCount[duchy] = 8;
      262:   91:      state->supplyCount[province] = 8;
      262:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      262:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      262:  102:  state->supplyCount[silver] = 40;
      262:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    11004:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 5240
branch  1 taken 262
        -:  107:    {
    86460:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 40610
branch  1 taken 2620
        -:  109:	    {
    40610:  110:	       if (kingdomCards[j] == i)
branch  0 taken 2620
branch  1 taken 37990
        -:  111:	       {
        -:  112:	          //check if card is a 'Victory' Kingdom card
     5240:  113:	          if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 2620
branch  1 taken 0
branch  2 taken 1
branch  3 taken 2619
        -:  114:		        {
        1:  115:		            if (numPlayers == 2){
branch  0 taken 1
branch  1 taken 0
        1:  116:		                state->supplyCount[i] = 8;
        1:  117:		            }
        -:  118:		        else {
    #####:  119:              state->supplyCount[i] = 12; }
        1:  120:		        }
        -:  121:	          else
        -:  122:		        {
     2619:  123:		            state->supplyCount[i] = 10;
        -:  124:		        }
     2620:  125:	          break;
        -:  126:	        }
        -:  127:	        else    //card is not in the set choosen for the game
        -:  128:	        {
    37990:  129:	           state->supplyCount[i] = -1;
        -:  130:	        }
    37990:  131:	       }
        -:  132:
     5240:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
     1572:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 524
branch  1 taken 262
        -:  140:    {
      524:  141:      state->deckCount[i] = 0;
     4192:  142:      for (j = 0; j < 3; j++)
branch  0 taken 1572
branch  1 taken 524
        -:  143:	{
     1572:  144:	  state->deck[i][j] = estate;
     1572:  145:	  state->deckCount[i]++;
     1572:  146:	}
     8384:  147:      for (j = 3; j < 10; j++)
branch  0 taken 3668
branch  1 taken 524
        -:  148:	{
     3668:  149:	  state->deck[i][j] = copper;
     3668:  150:	  state->deckCount[i]++;
     3668:  151:	}
      524:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
     1572:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 524
branch  1 taken 262
        -:  156:    {
      524:  157:      if ( shuffle(i, state) < 0 )
branch  0 taken 0
branch  1 taken 524
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
      524:  161:    }
        -:  162:
        -:  163:  //draw player hands
     1572:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 524
branch  1 taken 262
        -:  165:    {
        -:  166:      //initialize hand size to zero
      524:  167:      state->handCount[i] = 0;
      524:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
      524:  174:    }
        -:  175:
        -:  176:  //set embargo tokens to 0 for all supply piles
    14672:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 7074
branch  1 taken 262
        -:  178:    {
     7074:  179:      state->embargoTokens[i] = 0;
     7074:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
      262:  183:  state->outpostPlayed = 0;
      262:  184:  state->phase = 0;
      262:  185:  state->numActions = 1;
      262:  186:  state->numBuys = 1;
      262:  187:  state->playedCardCount = 0;
      262:  188:  state->whoseTurn = 0;
      262:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
     3144:  193:  for (it = 0; it < 5; it++){
branch  0 taken 1310
branch  1 taken 262
     1310:  194:    drawCard(state->whoseTurn, state);
     1310:  195:  }
        -:  196:
      262:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
      262:  199:  return 0;
      262:  200:}
        -:  201:
function shuffle called 553 returned 100% blocks executed 100%
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
      553:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
      553:  210:  if (state->deckCount[player] < 1)
branch  0 taken 14
branch  1 taken 539
       14:  211:    return -1;
      539:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    11958:  215:  while (state->deckCount[player] > 0) {
branch  0 taken 5440
branch  1 taken 539
     5440:  216:    card = floor(Random() * state->deckCount[player]);
     5440:  217:    newDeck[newDeckPos] = state->deck[player][card];
     5440:  218:    newDeckPos++;
    38602:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 13861
branch  1 taken 5440
    13861:  220:      state->deck[player][i] = state->deck[player][i+1];
    13861:  221:    }
     5440:  222:    state->deckCount[player]--;
        -:  223:  }
    11958:  224:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 5440
branch  1 taken 539
     5440:  225:    state->deck[player][i] = newDeck[i];
     5440:  226:    state->deckCount[player]++;
     5440:  227:  }
        -:  228:
      539:  229:  return 0;
      553:  230:}
        -:  231:
function playCard called 60 returned 100% blocks executed 75%
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:  int card;
       60:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
       60:  238:  if (state->phase != 0)
branch  0 taken 0
branch  1 taken 60
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:
        -:  243:  //check if player has enough actions
       60:  244:  if ( state->numActions < 1 )
branch  0 taken 53
branch  1 taken 7
        -:  245:    {
       53:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //get card played
        7:  250:  card = handCard(handPos, state);
        -:  251:
        -:  252:  //check if selected card is an action
       14:  253:  if ( card < adventurer || card > treasure_map )
branch  0 taken 7
branch  1 taken 0
branch  2 taken 0
branch  3 taken 7
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:
        -:  258:  //play card
        7:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0
branch  1 taken 7
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:
        -:  264:  //reduce number of actions
        7:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        7:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:
        7:  270:  return 0;
       60:  271:}
        -:  272:
function buyCard called 32 returned 100% blocks executed 75%
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       32:  281:  who = state->whoseTurn;
        -:  282:
       32:  283:  if (state->numBuys < 1){
branch  0 taken 0
branch  1 taken 32
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       32:  287:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 0
branch  1 taken 32
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
       32:  291:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 0
branch  1 taken 32
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       32:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       32:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:
       32:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       32:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:
       32:  309:  return 0;
       32:  310:}
        -:  311:
function numHandCards called 267 returned 100% blocks executed 100%
        -:  312:int numHandCards(struct gameState *state) {
      267:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
function handCard called 540 returned 100% blocks executed 100%
        -:  316:int handCard(int handPos, struct gameState *state) {
      540:  317:  int currentPlayer = whoseTurn(state);
      540:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 268 returned 100% blocks executed 100%
        -:  321:int supplyCount(int card, struct gameState *state) {
      268:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 929 returned 100% blocks executed 100%
        -:  347:int whoseTurn(struct gameState *state) {
      929:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 35 returned 100% blocks executed 100%
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       35:  354:  int currentPlayer = whoseTurn(state);
        -:  355:
        -:  356:  //Discard hand
      486:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 208
branch  1 taken 35
      208:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      208:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
      208:  360:  }
       35:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:  //Code for determining the player
       35:  364:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 19
branch  1 taken 16
       19:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       19:  366:  }
        -:  367:  else{
       16:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       35:  371:  state->outpostPlayed = 0;
       35:  372:  state->phase = 0;
       35:  373:  state->numActions = 1;
       35:  374:  state->coins = 0;
       35:  375:  state->numBuys = 1;
       35:  376:  state->playedCardCount = 0;
       35:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      420:  381:  for (k = 0; k < 5; k++){
branch  0 taken 175
branch  1 taken 35
      175:  382:    drawCard(state->whoseTurn, state);//Draw a card
      175:  383:  }
        -:  384:
        -:  385:  //Update money
       35:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       35:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 105 returned 100% blocks executed 100%
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:
        -:  395:  //if stack of Province cards is empty, the game ends
      105:  396:  if (state->supplyCount[province] == 0)
branch  0 taken 13
branch  1 taken 92
        -:  397:    {
       13:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       92:  402:  j = 0;
     4784:  403:  for (i = 0; i < 25; i++)
branch  0 taken 2300
branch  1 taken 92
        -:  404:  {
     2300:  405:    if (state->supplyCount[i] == 0) {
branch  0 taken 180
branch  1 taken 2120
      180:  406:	     j++;
      180:  407:    }
     2300:  408:  }
       92:  409:  if ( j >= 3)
branch  0 taken 60
branch  1 taken 32
        -:  410:  {
       60:  411:    return 1;
        -:  412:  }
        -:  413:
       32:  414:  return 0;
      105:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 72%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
       14:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 5
branch  1 taken 2
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0
branch  1 taken 5
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0
branch  1 taken 5
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0
branch  1 taken 5
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0
branch  1 taken 5
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0
branch  1 taken 5
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0
branch  1 taken 5
        5:  430:    }
        -:  431:
        -:  432:  //score from discard
       64:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 30
branch  1 taken 2
        -:  434:    {
       30:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0
branch  1 taken 30
       34:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 4
branch  1 taken 26
       30:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0
branch  1 taken 30
       36:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 6
branch  1 taken 24
       30:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0
branch  1 taken 30
       30:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0
branch  1 taken 30
       30:  441:    }
        -:  442:
        -:  443:  //score from deck
       64:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 30
branch  1 taken 2
        -:  445:    {
       30:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0
branch  1 taken 30
       33:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 3
branch  1 taken 27
       30:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0
branch  1 taken 30
       35:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 5
branch  1 taken 25
       30:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0
branch  1 taken 30
       30:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0
branch  1 taken 30
       30:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1582 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1582:  528:  if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 21
branch  1 taken 1561
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      442:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 200
branch  1 taken 21
      200:  534:      state->deck[player][i] = state->discard[player][i];
      200:  535:      state->discard[player][i] = -1;
      200:  536:    }
        -:  537:
       21:  538:    state->deckCount[player] = state->discardCount[player];
       21:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       21:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       21:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       21:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       21:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       21:  559:    if (deckCounter == 0)
branch  0 taken 6
branch  1 taken 15
        6:  560:      return -1;
        -:  561:
       15:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  563:    state->deckCount[player]--;
       15:  564:    state->handCount[player]++;//Increment hand count
       15:  565:  }
        -:  566:
        -:  567:  else{
     1561:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1561:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1561:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1561:  576:    state->deckCount[player]--;
     1561:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1576:  580:  return 0;
     1582:  581:}
        -:  582:
function getCost called 64 returned 100% blocks executed 25%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       64:  585:  switch( cardNumber )
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 16
branch  4 taken 0
branch  5 taken 34
branch  6 taken 6
branch  7 taken 4
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 4
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       16:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       34:  598:      return 3;
        -:  599:    case gold:
        6:  600:      return 6;
        -:  601:    case adventurer:
        4:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        4:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
       64:  644:}
        -:  645:
function callAdventurer called 8 returned 100% blocks executed 100%
        -:  646:void callAdventurer(struct gameState *state, int currentPlayer, int temphand[])
        -:  647:{
        -:  648:  //printf("%s\n", "adventurer card played!");
        8:  649:  int drawntreasure = 0;
        8:  650:  int z = 0; // this is the counter for the temp hand
        -:  651:  //increased the drawTreasure to player would draw 5 treasure cards instead of 2.
      118:  652:  while(drawntreasure < 5)
branch  0 taken 51
branch  1 taken 8
        -:  653:  {
       51:  654:    if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 8
branch  1 taken 43
        -:  655:      //if the deck is empty we need to shuffle discard and add to deck
        8:  656:      shuffle(currentPlayer, state);
        8:  657:    }
       51:  658:    drawCard(currentPlayer, state);
        -:  659:
       51:  660:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       85:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 23
branch  1 taken 28
branch  2 taken 11
branch  3 taken 12
branch  4 taken 0
branch  5 taken 11
       40:  662:      drawntreasure++;
       40:  663:    }
        -:  664:    else {
       11:  665:      temphand[z]=cardDrawn;
        -:  666:      //changed -- to +++
       11:  667:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  668:      //moved the discard into where the top card is supposed to be removed.
        -:  669:      //state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];
       11:  670:      z++;
        -:  671:    }
        -:  672:  }
        -:  673:
       38:  674:  while(z-1>=0) {
branch  0 taken 11
branch  1 taken 8
       11:  675:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
       11:  676:    z=z-1;
        -:  677:  }
        -:  678:
        8:  679:    return;
        -:  680:}
        -:  681:
        -:  682:
function callSmithy called 5 returned 100% blocks executed 100%
        -:  683:void callSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  684:{
        5:  685:  int i = 0;
        -:  686:  //+3 Cards
       60:  687:  for (i = 0; i < 5; i++)
branch  0 taken 25
branch  1 taken 5
        -:  688:  {
       25:  689:    drawCard(currentPlayer, state);
       25:  690:  }
        -:  691:
        -:  692:  //discard card from hand
        5:  693:  discardCard(handPos, currentPlayer, state, 0);
        5:  694:  return;
        -:  695:}
        -:  696:
function callCouncil_Room called 3 returned 100% blocks executed 100%
        -:  697:void callCouncil_Room(struct gameState *state, int currentPlayer, int handPos)
        -:  698:{
        3:  699:  int i = 0;
        -:  700:  //+4 Cards
       30:  701:  for (i = 0; i < 4; i++)
branch  0 taken 12
branch  1 taken 3
        -:  702:  {
       12:  703:    drawCard(currentPlayer, state);
       12:  704:  }
        -:  705:
        -:  706:  //+1 Buy
        3:  707:  state->numBuys++;
        -:  708:
        -:  709:  //Each other player draws a card
       18:  710:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 6
branch  1 taken 3
        -:  711:  {
        -:  712:  //changed if loop to while
        6:  713:    if ( i != currentPlayer )
branch  0 taken 3
branch  1 taken 3
        -:  714:    {
        3:  715:      drawCard(i, state);
        3:  716:      i++;
        3:  717:    }
        6:  718:  }
        -:  719:
        -:  720:  //put played card in played card pile
        3:  721:  discardCard(handPos, currentPlayer, state, 0);
        3:  722:}
        -:  723:
function callBaron called 9 returned 100% blocks executed 92%
        -:  724:void callBaron(struct gameState *state, int choice1, int currentPlayer)
        -:  725:{
        9:  726:  state->numBuys++;//Increase buys by 1!
        -:  727:
        -:  728:  //Boolean true or going to discard an estate
        9:  729:  if (choice1 > 0) {
branch  0 taken 6
branch  1 taken 3
        6:  730:     int p = 0;//Iterator for hand!
        6:  731:     int card_not_discarded = 1;//Flag for discard set!
        -:  732:
       42:  733:      while(card_not_discarded){
branch  0 taken 15
branch  1 taken 6
       15:  734:         if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 taken 3
branch  1 taken 12
        3:  735:            state->coins += 4;//Add 4 coins to the amount of coins
        3:  736:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        3:  737:            state->discardCount[currentPlayer]++;
        -:  738:
       24:  739:            for (;p < state->handCount[currentPlayer]; p++)
branch  0 taken 9
branch  1 taken 3
        -:  740:            {
        9:  741:               state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        9:  742:            }
        -:  743:
        3:  744:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        3:  745:            state->handCount[currentPlayer]--;
        3:  746:            card_not_discarded = 0; //Exit the loop
        3:  747:         }
        -:  748:
       12:  749:        else if (p > state->handCount[currentPlayer]) {
branch  0 taken 3
branch  1 taken 9
        -:  750:          if(DEBUG) {
        -:  751:            printf("No estate cards in your hand, invalid choice\n");
        -:  752:            printf("Must gain an estate if there are any\n");
        -:  753:          }
        3:  754:          if (supplyCount(estate, state) > 0){
branch  0 taken 3
branch  1 taken 0
        3:  755:            gainCard(estate, state, 0, currentPlayer);
        3:  756:            state->supplyCount[estate]--;//Decrement estates
        3:  757:            if (supplyCount(estate, state) == 0){
branch  0 taken 0
branch  1 taken 3
    #####:  758:                isGameOver(state);
    #####:  759:            }
        3:  760:          }
        3:  761:          card_not_discarded = 0;//Exit the loop
        3:  762:        }
        -:  763:
        -:  764:        else{
        9:  765:          p++;//Next card
        -:  766:        }
        -:  767:      }
        6:  768:  }
        -:  769:
        -:  770:  //choose not to discard an estate and instead gain an estate card
        -:  771:  else {
        3:  772:     if (supplyCount(estate, state) > 0){
branch  0 taken 3
branch  1 taken 0
        3:  773:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
        3:  774:        state->supplyCount[estate]--;//Decrement Estates
        3:  775:        if (supplyCount(estate, state) == 0){
branch  0 taken 0
branch  1 taken 3
    #####:  776:           isGameOver(state);
    #####:  777:        }
        3:  778:     }
        -:  779:  }
        9:  780:}
        -:  781:
function callMinion called 0 returned 0% blocks executed 0%
        -:  782:void callMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  783:{
    #####:  784:  int i = 0;
    #####:  785:  int j = 0;
        -:  786:  //bug: redefine currentPlayer to 0
    #####:  787:  currentPlayer = 0;
        -:  788:
        -:  789:  //+1 action
    #####:  790:  state->numActions++;
        -:  791:
        -:  792:  //discard card from hand
    #####:  793:  discardCard(handPos, currentPlayer, state, 0);
        -:  794:
    #####:  795:  if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:  {
    #####:  797:    state->coins = state->coins + 2;
    #####:  798:  }
        -:  799:
    #####:  800:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:  {
        -:  802:    //discard hand
    #####:  803:    while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  804:    {
    #####:  805:      discardCard(handPos, currentPlayer, state, 0);
        -:  806:    }
        -:  807:
        -:  808:    //draw 4
    #####:  809:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:    {
    #####:  811:      drawCard(currentPlayer, state);
    #####:  812:    }
        -:  813:
        -:  814:    //other players discard hand and redraw if hand size > 4
    #####:  815:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:    {
    #####:  817:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:      {
    #####:  819:        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:        {
        -:  821:          //discard hand
        -:  822:          //introduce bug - instead of discardCard just decrement the handCount
    #####:  823:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  824:          {
        -:  825:            //discardCard(handPos, i, state, 0);
    #####:  826:            state->handCount[i]--;
        -:  827:          }
        -:  828:
        -:  829:          //draw 4
    #####:  830:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  831:          {
    #####:  832:            drawCard(i, state);
    #####:  833:          }
    #####:  834:        }
    #####:  835:      }
    #####:  836:    }
    #####:  837:  }
    #####:  838:  return;
        -:  839:}
        -:  840:
function cardEffect called 25 returned 100% blocks executed 5%
        -:  841:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  842:{
        -:  843:  int i;
        -:  844:  int j;
        -:  845:  int k;
        -:  846:  int x;
        -:  847:  int index;
       25:  848:  int currentPlayer = whoseTurn(state);
       25:  849:  int nextPlayer = currentPlayer + 1;
        -:  850:
       25:  851:  int tributeRevealedCards[2] = {-1, -1};
        -:  852:  int temphand[MAX_HAND];// moved above the if statement
        -:  853:  //int drawntreasure=0;
        -:  854:  //int cardDrawn;
        -:  855:  //int z = 0;// this is the counter for the temp hand
       25:  856:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 5
branch  1 taken 20
        5:  857:    nextPlayer = 0;
        5:  858:  }
        -:  859:
        -:  860:  //uses switch to select card and perform actions
       25:  861:  switch( card )
branch  0 taken 8
branch  1 taken 3
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 5
branch  7 taken 0
branch  8 taken 9
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  862:    {
        -:  863:    case adventurer:
        8:  864:      callAdventurer(state, currentPlayer, temphand);
        8:  865:      return 0;
        -:  866:
        -:  867:    case council_room:
        3:  868:      callCouncil_Room(state, currentPlayer, handPos);
        -:  869:    /*
        -:  870:      //+4 Cards
        -:  871:      for (i = 0; i < 4; i++)
        -:  872:	{
        -:  873:	  drawCard(currentPlayer, state);
        -:  874:	}
        -:  875:
        -:  876:      //+1 Buy
        -:  877:      state->numBuys++;
        -:  878:
        -:  879:      //Each other player draws a card
        -:  880:      for (i = 0; i < state->numPlayers; i++)
        -:  881:	{
        -:  882:	  if ( i != currentPlayer )
        -:  883:	    {
        -:  884:	      drawCard(i, state);
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:      //put played card in played card pile
        -:  889:      discardCard(handPos, currentPlayer, state, 0);
        -:  890:      */
        3:  891:      return 0;
        -:  892:
        -:  893:    case feast:
        -:  894:      //gain card with cost up to 5
        -:  895:      //Backup hand
    #####:  896:      for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  897:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  898:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  899:      }
        -:  900:      //Backup hand
        -:  901:
        -:  902:      //Update Coins for Buy
    #####:  903:      updateCoins(currentPlayer, state, 5);
    #####:  904:      x = 1;//Condition to loop on
    #####:  905:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  906:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  907:	  if (DEBUG)
        -:  908:	    printf("None of that card left, sorry!\n");
        -:  909:
        -:  910:	  if (DEBUG){
        -:  911:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  912:	  }
    #####:  913:	}
    #####:  914:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  915:	  printf("That card is too expensive!\n");
        -:  916:
        -:  917:	  if (DEBUG){
        -:  918:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  919:	  }
    #####:  920:	}
        -:  921:	else{
        -:  922:
        -:  923:	  if (DEBUG){
        -:  924:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  925:	  }
        -:  926:
    #####:  927:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  928:	  x = 0;//No more buying cards
        -:  929:
        -:  930:	  if (DEBUG){
        -:  931:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  932:	  }
        -:  933:
        -:  934:	}
        -:  935:      }
        -:  936:
        -:  937:      //Reset Hand
    #####:  938:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  939:	state->hand[currentPlayer][i] = temphand[i];
    #####:  940:	temphand[i] = -1;
    #####:  941:      }
        -:  942:      //Reset Hand
        -:  943:
    #####:  944:      return 0;
        -:  945:
        -:  946:    case gardens:
    #####:  947:      return -1;
        -:  948:
        -:  949:    case mine:
    #####:  950:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  951:
    #####:  952:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  953:	{
    #####:  954:	  return -1;
        -:  955:	}
        -:  956:
    #####:  957:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;
        -:  965:	}
        -:  966:
    #####:  967:      gainCard(choice2, state, 2, currentPlayer);
        -:  968:
        -:  969:      //discard card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);
        -:  971:
        -:  972:      //discard trashed card
    #####:  973:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	{
    #####:  975:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      discardCard(i, currentPlayer, state, 0);
    #####:  978:	      break;
        -:  979:	    }
    #####:  980:	}
        -:  981:
    #####:  982:      return 0;
        -:  983:
        -:  984:    case remodel:
    #####:  985:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  986:
    #####:  987:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  return -1;
        -:  990:	}
        -:  991:
    #####:  992:      gainCard(choice2, state, 0, currentPlayer);
        -:  993:
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
        -:  996:
        -:  997:      //discard trashed card
    #####:  998:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1001:	    {
    #####: 1002:	      discardCard(i, currentPlayer, state, 0);
    #####: 1003:	      break;
        -: 1004:	    }
    #####: 1005:	}
        -: 1006:
        -: 1007:
    #####: 1008:      return 0;
        -: 1009:
        -: 1010:    case smithy:
        5: 1011:      callSmithy(state, currentPlayer, handPos);
        5: 1012:      return 0;
        -: 1013:
        -: 1014:    case village:
        -: 1015:      //+1 Card
    #####: 1016:      drawCard(currentPlayer, state);
        -: 1017:
        -: 1018:      //+2 Actions
    #####: 1019:      state->numActions = state->numActions + 2;
        -: 1020:
        -: 1021:      //discard played card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1023:      return 0;
        -: 1024:
        -: 1025:    case baron:
        9: 1026:      callBaron(state, choice1, currentPlayer);
        -: 1027:    /*
        -: 1028:      state->numBuys++;//Increase buys by 1!
        -: 1029:
        -: 1030:      //Boolean true or going to discard an estate
        -: 1031:      if (choice1 > 0) {
        -: 1032:	       int p = 0;//Iterator for hand!
        -: 1033:	       int card_not_discarded = 1;//Flag for discard set!
        -: 1034:
        -: 1035:	        while(card_not_discarded){
        -: 1036:	           if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
        -: 1037:	              state->coins += 4;//Add 4 coins to the amount of coins
        -: 1038:	              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1039:	              state->discardCount[currentPlayer]++;
        -: 1040:
        -: 1041:        	      for (;p < state->handCount[currentPlayer]; p++)
        -: 1042:                {
        -: 1043:        	         state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1044:        	      }
        -: 1045:
        -: 1046:        	      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1047:        	      state->handCount[currentPlayer]--;
        -: 1048:        	      card_not_discarded = 0; //Exit the loop
        -: 1049:	           }
        -: 1050:
        -: 1051:        	  else if (p > state->handCount[currentPlayer]) {
        -: 1052:        	    if(DEBUG) {
        -: 1053:        	      printf("No estate cards in your hand, invalid choice\n");
        -: 1054:        	      printf("Must gain an estate if there are any\n");
        -: 1055:        	    }
        -: 1056:        	    if (supplyCount(estate, state) > 0){
        -: 1057:        	      gainCard(estate, state, 0, currentPlayer);
        -: 1058:        	      state->supplyCount[estate]--;//Decrement estates
        -: 1059:        	      if (supplyCount(estate, state) == 0){
        -: 1060:        		        isGameOver(state);
        -: 1061:        	      }
        -: 1062:        	    }
        -: 1063:        	    card_not_discarded = 0;//Exit the loop
        -: 1064:        	  }
        -: 1065:
        -: 1066:        	  else{
        -: 1067:        	    p++;//Next card
        -: 1068:        	  }
        -: 1069:        	}
        -: 1070:      }
        -: 1071:
        -: 1072:      //choose not to discard an estate and instead gain an estate card
        -: 1073:      else {
        -: 1074:	       if (supplyCount(estate, state) > 0){
        -: 1075:	          gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1076:	          state->supplyCount[estate]--;//Decrement Estates
        -: 1077:	          if (supplyCount(estate, state) == 0){
        -: 1078:	             isGameOver(state);
        -: 1079:	          }
        -: 1080:	       }
        -: 1081:      }
        -: 1082:
        -: 1083:      */
        9: 1084:      return 0;
        -: 1085:
        -: 1086:    case great_hall:
        -: 1087:      //+1 Card
    #####: 1088:      drawCard(currentPlayer, state);
        -: 1089:
        -: 1090:      //+1 Actions
    #####: 1091:      state->numActions++;
        -: 1092:
        -: 1093:      //discard card from hand
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1095:      return 0;
        -: 1096:
        -: 1097:    case minion:
    #####: 1098:      callMinion(state, choice1, choice2, currentPlayer, handPos);
        -: 1099:
        -: 1100:    /*
        -: 1101:      //+1 action
        -: 1102:      state->numActions++;
        -: 1103:
        -: 1104:      //discard card from hand
        -: 1105:      discardCard(handPos, currentPlayer, state, 0);
        -: 1106:
        -: 1107:      if (choice1)		//+2 coins
        -: 1108:	{
        -: 1109:	  state->coins = state->coins + 2;
        -: 1110:	}
        -: 1111:
        -: 1112:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1113:	{
        -: 1114:	  //discard hand
        -: 1115:	  while(numHandCards(state) > 0)
        -: 1116:	    {
        -: 1117:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1118:	    }
        -: 1119:
        -: 1120:	  //draw 4
        -: 1121:	  for (i = 0; i < 4; i++)
        -: 1122:	    {
        -: 1123:	      drawCard(currentPlayer, state);
        -: 1124:	    }
        -: 1125:
        -: 1126:	  //other players discard hand and redraw if hand size > 4
        -: 1127:	  for (i = 0; i < state->numPlayers; i++)
        -: 1128:	    {
        -: 1129:	      if (i != currentPlayer)
        -: 1130:		{
        -: 1131:		  if ( state->handCount[i] > 4 )
        -: 1132:		    {
        -: 1133:		      //discard hand
        -: 1134:		      while( state->handCount[i] > 0 )
        -: 1135:			{
        -: 1136:			  discardCard(handPos, i, state, 0);
        -: 1137:			}
        -: 1138:
        -: 1139:		      //draw 4
        -: 1140:		      for (j = 0; j < 4; j++)
        -: 1141:			{
        -: 1142:			  drawCard(i, state);
        -: 1143:			}
        -: 1144:		    }
        -: 1145:		}
        -: 1146:	    }
        -: 1147:
        -: 1148:	}
        -: 1149:  */
    #####: 1150:      return 0;
        -: 1151:
        -: 1152:    case steward:
    #####: 1153:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
        -: 1155:	  //+2 cards
    #####: 1156:	  drawCard(currentPlayer, state);
    #####: 1157:	  drawCard(currentPlayer, state);
    #####: 1158:	}
    #####: 1159:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1160:	{
        -: 1161:	  //+2 coins
    #####: 1162:	  state->coins = state->coins + 2;
    #####: 1163:	}
        -: 1164:      else
        -: 1165:	{
        -: 1166:	  //trash 2 cards in hand
    #####: 1167:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1168:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1169:	}
        -: 1170:
        -: 1171:      //discard card from hand
    #####: 1172:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:    case tribute:
    #####: 1176:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1177:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1178:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1179:	  state->deckCount[nextPlayer]--;
    #####: 1180:	}
    #####: 1181:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1182:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1183:	  state->discardCount[nextPlayer]--;
    #####: 1184:	}
        -: 1185:	else{
        -: 1186:	  //No Card to Reveal
        -: 1187:	  if (DEBUG){
        -: 1188:	    printf("No cards to reveal\n");
        -: 1189:	  }
        -: 1190:	}
    #####: 1191:      }
        -: 1192:
        -: 1193:      else{
    #####: 1194:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1195:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1196:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1197:	    state->deckCount[nextPlayer]++;
    #####: 1198:	    state->discard[nextPlayer][i] = -1;
    #####: 1199:	    state->discardCount[nextPlayer]--;
    #####: 1200:	  }
        -: 1201:
    #####: 1202:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1203:	}
    #####: 1204:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1205:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1206:	state->deckCount[nextPlayer]--;
    #####: 1207:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1208:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1209:	state->deckCount[nextPlayer]--;
        -: 1210:      }
        -: 1211:
    #####: 1212:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1213:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1214:	state->playedCardCount++;
    #####: 1215:	tributeRevealedCards[1] = -1;
    #####: 1216:      }
        -: 1217:
    #####: 1218:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1219:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1220:	  state->coins += 2;
    #####: 1221:	}
        -: 1222:
    #####: 1223:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1224:	  drawCard(currentPlayer, state);
    #####: 1225:	  drawCard(currentPlayer, state);
    #####: 1226:	}
        -: 1227:	else{//Action Card
    #####: 1228:	  state->numActions = state->numActions + 2;
        -: 1229:	}
    #####: 1230:      }
        -: 1231:
    #####: 1232:      return 0;
        -: 1233:
        -: 1234:    case ambassador:
    #####: 1235:      j = 0;		//used to check if player has enough cards to discard
        -: 1236:
    #####: 1237:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1238:	{
    #####: 1239:	  return -1;
        -: 1240:	}
        -: 1241:
    #####: 1242:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1243:	{
    #####: 1244:	  return -1;
        -: 1245:	}
        -: 1246:
    #####: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
    #####: 1249:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1250:	    {
    #####: 1251:	      j++;
    #####: 1252:	    }
    #####: 1253:	}
    #####: 1254:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1255:	{
    #####: 1256:	  return -1;
        -: 1257:	}
        -: 1258:
        -: 1259:      if (DEBUG)
        -: 1260:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1261:
        -: 1262:      //increase supply count for choosen card by amount being discarded
    #####: 1263:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1264:
        -: 1265:      //each other player gains a copy of revealed card
    #####: 1266:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1267:	{
    #####: 1268:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1269:	    {
    #####: 1270:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1271:	    }
    #####: 1272:	}
        -: 1273:
        -: 1274:      //discard played card from hand
    #####: 1275:      discardCard(handPos, currentPlayer, state, 0);
        -: 1276:
        -: 1277:      //trash copies of cards returned to supply
    #####: 1278:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1279:	{
    #####: 1280:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1281:	    {
    #####: 1282:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1283:		{
    #####: 1284:		  discardCard(i, currentPlayer, state, 1);
    #####: 1285:		  break;
        -: 1286:		}
    #####: 1287:	    }
    #####: 1288:	}
        -: 1289:
    #####: 1290:      return 0;
        -: 1291:
        -: 1292:    case cutpurse:
        -: 1293:
    #####: 1294:      updateCoins(currentPlayer, state, 2);
    #####: 1295:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1296:	{
    #####: 1297:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1298:	    {
    #####: 1299:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1300:		{
    #####: 1301:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1302:		    {
    #####: 1303:		      discardCard(j, i, state, 0);
    #####: 1304:		      break;
        -: 1305:		    }
    #####: 1306:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1307:		    {
    #####: 1308:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1309:			{
        -: 1310:			  if (DEBUG)
        -: 1311:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1312:			}
    #####: 1313:		      break;
        -: 1314:		    }
    #####: 1315:		}
        -: 1316:
    #####: 1317:	    }
        -: 1318:
    #####: 1319:	}
        -: 1320:
        -: 1321:      //discard played card from hand
    #####: 1322:      discardCard(handPos, currentPlayer, state, 0);
        -: 1323:
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:
        -: 1327:    case embargo:
        -: 1328:      //+2 Coins
    #####: 1329:      state->coins = state->coins + 2;
        -: 1330:
        -: 1331:      //see if selected pile is in play
    #####: 1332:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  return -1;
        -: 1335:	}
        -: 1336:
        -: 1337:      //add embargo token to selected supply pile
    #####: 1338:      state->embargoTokens[choice1]++;
        -: 1339:
        -: 1340:      //trash card
    #####: 1341:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1342:      return 0;
        -: 1343:
        -: 1344:    case outpost:
        -: 1345:      //set outpost flag
    #####: 1346:      state->outpostPlayed++;
        -: 1347:
        -: 1348:      //discard card
    #####: 1349:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1350:      return 0;
        -: 1351:
        -: 1352:    case salvager:
        -: 1353:      //+1 buy
    #####: 1354:      state->numBuys++;
        -: 1355:
    #####: 1356:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1357:	{
        -: 1358:	  //gain coins equal to trashed card
    #####: 1359:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1360:	  //trash card
    #####: 1361:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1362:	}
        -: 1363:
        -: 1364:      //discard card
    #####: 1365:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1366:      return 0;
        -: 1367:
        -: 1368:    case sea_hag:
    #####: 1369:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1370:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1371:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1372:	  state->discardCount[i]++;
    #####: 1373:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1374:	}
    #####: 1375:      }
    #####: 1376:      return 0;
        -: 1377:
        -: 1378:    case treasure_map:
        -: 1379:      //search hand for another treasure_map
    #####: 1380:      index = -1;
    #####: 1381:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1382:	{
    #####: 1383:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1384:	    {
    #####: 1385:	      index = i;
    #####: 1386:	      break;
        -: 1387:	    }
    #####: 1388:	}
    #####: 1389:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1390:	{
        -: 1391:	  //trash both treasure cards
    #####: 1392:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1393:	  discardCard(index, currentPlayer, state, 1);
        -: 1394:
        -: 1395:	  //gain 4 Gold cards
    #####: 1396:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1397:	    {
    #####: 1398:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1399:	    }
        -: 1400:
        -: 1401:	  //return success
    #####: 1402:	  return 1;
        -: 1403:	}
        -: 1404:
        -: 1405:      //no second treasure_map found in hand
    #####: 1406:      return -1;
        -: 1407:    }
        -: 1408:
    #####: 1409:  return -1;
       25: 1410:}
        -: 1411:
function discardCard called 8 returned 100% blocks executed 80%
        -: 1412:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1413:{
        -: 1414:
        -: 1415:  //if card is not trashed, added to Played pile
        8: 1416:  if (trashFlag < 1)
branch  0 taken 8
branch  1 taken 0
        -: 1417:    {
        -: 1418:      //add card to played pile
        8: 1419:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1420:      state->playedCardCount++;
        8: 1421:    }
        -: 1422:
        -: 1423:  //set played card to -1
        8: 1424:  state->hand[currentPlayer][handPos] = -1;
        -: 1425:
        -: 1426:  //remove card from player's hand
        8: 1427:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0
branch  1 taken 8
        -: 1428:    {
        -: 1429:      //reduce number of cards in hand
    #####: 1430:      state->handCount[currentPlayer]--;
    #####: 1431:    }
        8: 1432:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0
branch  1 taken 8
        -: 1433:    {
        -: 1434:      //reduce number of cards in hand
    #####: 1435:      state->handCount[currentPlayer]--;
    #####: 1436:    }
        -: 1437:  else
        -: 1438:    {
        -: 1439:      //replace discarded card with last card in hand
        8: 1440:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1441:      //set last card to -1
        8: 1442:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1443:      //reduce number of cards in hand
        8: 1444:      state->handCount[currentPlayer]--;
        -: 1445:    }
        -: 1446:
        8: 1447:  return 0;
        -: 1448:}
        -: 1449:
function gainCard called 224 returned 100% blocks executed 100%
        -: 1450:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1451:{
        -: 1452:  //Note: supplyPos is enum of choosen card
        -: 1453:
        -: 1454:  //check if supply pile is empty (0) or card is not used in game (-1)
      224: 1455:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 33
branch  1 taken 191
        -: 1456:    {
       33: 1457:      return -1;
        -: 1458:    }
        -: 1459:
        -: 1460:  //added card for [whoseTurn] current player:
        -: 1461:  // toFlag = 0 : add to discard
        -: 1462:  // toFlag = 1 : add to deck
        -: 1463:  // toFlag = 2 : add to hand
        -: 1464:
      191: 1465:  if (toFlag == 1)
branch  0 taken 51
branch  1 taken 140
        -: 1466:    {
       51: 1467:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       51: 1468:      state->deckCount[player]++;
       51: 1469:    }
      140: 1470:  else if (toFlag == 2)
branch  0 taken 51
branch  1 taken 89
        -: 1471:    {
       51: 1472:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       51: 1473:      state->handCount[player]++;
       51: 1474:    }
        -: 1475:  else
        -: 1476:    {
       89: 1477:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       89: 1478:      state->discardCount[player]++;
        -: 1479:    }
        -: 1480:
        -: 1481:  //decrease number in supply pile
      191: 1482:  state->supplyCount[supplyPos]--;
        -: 1483:
      191: 1484:  return 0;
      224: 1485:}
        -: 1486:
function updateCoins called 304 returned 100% blocks executed 100%
        -: 1487:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1488:{
        -: 1489:  int i;
        -: 1490:
        -: 1491:  //reset coin count
      304: 1492:  state->coins = 0;
        -: 1493:
        -: 1494:  //add coins for each Treasure card in player's hand
     3714: 1495:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 1553
branch  1 taken 304
        -: 1496:    {
     1553: 1497:      if (state->hand[player][i] == copper)
branch  0 taken 1162
branch  1 taken 391
        -: 1498:	{
     1162: 1499:	  state->coins += 1;
     1162: 1500:	}
      391: 1501:      else if (state->hand[player][i] == silver)
branch  0 taken 50
branch  1 taken 341
        -: 1502:	{
       50: 1503:	  state->coins += 2;
       50: 1504:	}
      341: 1505:      else if (state->hand[player][i] == gold)
branch  0 taken 3
branch  1 taken 338
        -: 1506:	{
        3: 1507:	  state->coins += 3;
        3: 1508:	}
     1553: 1509:    }
        -: 1510:
        -: 1511:  //add bonus
      304: 1512:  state->coins += bonus;
        -: 1513:
      304: 1514:  return 0;
        -: 1515:}
        -: 1516:
        -: 1517:
        -: 1518://end of dominion.c
