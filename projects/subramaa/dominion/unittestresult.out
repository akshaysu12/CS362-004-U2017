--------------------- SMITHY CARD TEST ---------------------

------TESTING HAND SIZE -------
Expected Value: 8, ACTUAL VALUE: 9
HAND SIZE: TEST FAILED

------TESTING DECK SIZE -------
Expected Value: 2, ACTUAL VALUE: 0
DECK SIZE: TEST FAILED

------TESTING DISCARD SIZE -------
Expected Value: 1, ACTUAL VALUE: 0
DISCARD SIZE: TEST FAILED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

--------------------- ADVENTURER CARD TEST ---------------------

------TESTING HAND SIZE -------
Expected Value: 7, ACTUAL VALUE: 8
HAND SIZE: TEST FAILED

------TESTING DECK SIZE -------
DECK SIZE: TEST PASSED

------TESTING DISCARD SIZE -------
DISCARD SIZE: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

--------------------- COUNCIL ROOM CARD TEST ---------------------

------TESTING HAND SIZE -------
Expected Value: 9, ACTUAL VALUE: 8
HAND SIZE: TEST FAILED

------TESTING DECK SIZE -------
Expected Value: 1, ACTUAL VALUE: 1
DECK SIZE: TEST PASSED

------TESTING DISCARD SIZE -------
Expected Value: 1, ACTUAL VALUE: 0
DISCARD SIZE: TEST FAILED

------TESTING NUM BUYS -------
Expected Value: 2, ACTUAL VALUE: 2
NUM BUYS: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

--------------------- BARON CARD TEST ---------------------
----------TEST: DISCARD ESTATE CARD - CARD IN HAND---------------

------TESTING COIN INCREASE -------
Expected Value: 8, ACTUAL VALUE: 8
COIN INCREASE: TEST PASSED

------TESTING HAND SIZE -------
Expected Value: 4, ACTUAL VALUE: 4
HAND SIZE: TEST PASSED

------TESTING DISCARD SIZE -------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD SIZE: TEST PASSED

------TESTING DECK SIZE -------
Expected Value: 5, ACTUAL VALUE: 5
DECK SIZE: TEST PASSED

------TESTING ESTATE SUPPLY -------
Expected Value: 8, ACTUAL VALUE: 8
ESTATE SUPPLY: TEST PASSED
----------TEST: DISCARD ESTATE CARD - CARD NOT IN HAND---------------

------TESTING COINS -------
Expected Value: 4, ACTUAL VALUE: 4
COIN INCREASE: TEST PASSED

------TESTING HAND SIZE -------
Expected Value: 0, ACTUAL VALUE: 0
HAND SIZE: TEST PASSED

------TESTING DISCARD SIZE -------
Expected Value: 5, ACTUAL VALUE: 6
DISCARD SIZE: TEST FAILED

------TESTING DECK SIZE -------
Expected Value: 6, ACTUAL VALUE: 5
DECK SIZE: TEST FAILED

------TESTING TOP OF DECK FOR ESTATE CARD -------
DECK CARD: TEST FAILED

------TESTING ESTATE SUPPLY -------
Expected Value: 7, ACTUAL VALUE: 6
ESTATE SUPPLY: TEST FAILED
----------TEST: GAIN ESTATE CARD ---------------

------TESTING COINS -------
Expected Value: 4, ACTUAL VALUE: 4
COIN INCREASE: TEST PASSED

------TESTING HAND SIZE -------
Expected Value: 5, ACTUAL VALUE: 5
HAND SIZE: TEST FAILED

------TESTING DISCARD SIZE -------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD SIZE: TEST FAILED

------TESTING DECK SIZE -------
Expected Value: 6, ACTUAL VALUE: 5
DECK SIZE: TEST FAILED

------TESTING TOP OF DECK FOR ESTATE CARD -------
DECK CARD: TEST FAILED

------TESTING ESTATE SUPPLY -------
Expected Value: 7, ACTUAL VALUE: 6
ESTATE SUPPLY: TEST FAILED
--------------------- TEST IS GAME OVER FUNCTION TEST ---------------------

---TESTING END GAME FOR SUPPLYCOUNT 0, 1, 2, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 1, 2, 3, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 2, 3, 4, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 3, 4, 5, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 4, 5, 6, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 5, 6, 7, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 6, 7, 8, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 7, 8, 9, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 8, 9, 10, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 9, 10, 11, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 10, 11, 12, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 11, 12, 13, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 12, 13, 14, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 13, 14, 15, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 14, 15, 16, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 15, 16, 17, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 16, 17, 18, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 17, 18, 19, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 18, 19, 20, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 19, 20, 21, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 20, 21, 22, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 21, 22, 23, = 0 ----
END GAME: TEST PASSED

---TESTING END GAME FOR SUPPLYCOUNT 22, 23, 24, = 0 ----
END GAME: TEST PASSED
---TESTING END GAME FOR PROVINCE = 0 ----
END GAME: TEST PASSED
--------------------- TEST GAIN CARD FUNCTION TEST ---------------------

------TESTING EMPTY SUPPLY ------
Expected Value: -1, ACTUAL VALUE: -1
EMPTY SUPPLY GAIN CARD: TEST PASSED

-------------------TESTING CARD 0------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 1------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 2------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 3------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 4------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 5------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 6------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 7------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 8------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 9------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 10------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 11------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 12------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 13------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 14------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 15------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 16------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 17------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 18------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 19------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 20------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 21------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 22------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 23------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 24------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED

-------------------TESTING CARD 25------------------


------TESTING GAIN CARD TO DISCARD-------
Expected Value: 1, ACTUAL VALUE: 1
DISCARD GAIN: TEST PASSED

------TESTING GAIN CARD TO DECK-------
Expected Value: 6, ACTUAL VALUE: 6
DECK GAIN: TEST PASSED

------TESTING GAIN CARD TO HAND-------
Expected Value: 6, ACTUAL VALUE: 6
HAND GAIN: TEST PASSED

------TESTING OTHER PLAYERS -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

-------------------TESTING CARD 26------------------


------TESTING CARD NOT USED IN GAME-------
Expected Value: -1, ACTUAL VALUE: -1
INVALID CARD GAIN: TEST PASSED
--------------------- DRAW END TURN FUNCTION TEST ---------------------

------TESTING DISCARD OF CARDS -------
#Cards Removed from Hand: 5, #Cards Removed added to Discard: 5
DISCARD SIZE: TEST PASSED
DISCARD CARD CHECK: TEST PASSED

------TESTING RETURN VAL -------
RETURN VAL CHECK: TEST PASSED

------TESTING TURN INCREMENT -------
TURN CHECK: TEST PASSED

------TESTING HANDS -------
HAND SIZE: TEST PASSED
HAND VALUES: TEST PASSED
HAND SIZE NEXT PLAYER: TEST PASSED

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

--------------------- DRAW CARD FUNCTION TEST ---------------------

------TESTING CASE 1: CARDS IN DECK TO DRAW FROM -------

------TESTING HAND SIZE -------
Expected Value: 6, ACTUAL VALUE: 6
HAND SIZE: TEST PASSED

------TESTING CARD -------
ADDED CORRECT CARD: TEST PASSED

------TESTING OTHER PLAYERS VALUES -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED


------TESTING CASE 2: NO CARDS IN DECK TO DRAW FROM -------

------TESTING HAND SIZE -------
Expected Value: 6, ACTUAL VALUE: 6
HAND SIZE: TEST PASSED

------TESTING DECK SIZE -------
Expected Value: 5, ACTUAL VALUE: 5
HAND SIZE: TEST PASSED

------TESTING OTHER PLAYERS VALUES -------
HAND SIZE: TEST PASSED FOR PLAYER: 1
DECK SIZE: TEST PASSED FOR PLAYER: 1
DISCARD SIZE: TEST PASSED FOR PLAYER: 1

------TESTING SUPPLY CARDS-------
SUPPLY CARD TEST PASSED

File 'dominion.c'
Lines executed:40.24% of 656
Branches executed:37.17% of 417
Taken at least once:28.30% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:23
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 208964 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   208964:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 107164
branch  1 taken 101800
   107164:   10:    return 1;
   101800:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 98668
branch  1 taken 3132
    98668:   12:    return -1;
     3132:   13:  return 0;
   208964:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 174 returned 100% blocks executed 83%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
      174:   44:  SelectStream(1);
      174:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      348:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 174
branch  1 taken 0
branch  2 taken 0
branch  3 taken 174
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      174:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3828:   57:  for (i = 0; i < 10; i++)
branch  0 taken 1740
branch  1 taken 174
        -:   58:    {
    38280:   59:      for (j = 0; j < 10; j++)
branch  0 taken 17400
branch  1 taken 1740
        -:   60:        {
    33060:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 15660
branch  1 taken 1740
branch  2 taken 0
branch  3 taken 15660
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    17400:   65:        }
     1740:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      174:   73:  if (numPlayers == 2)
branch  0 taken 174
branch  1 taken 0
        -:   74:    {
      174:   75:      state->supplyCount[curse] = 10;
      174:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      174:   87:  if (numPlayers == 2)
branch  0 taken 174
branch  1 taken 0
        -:   88:    {
      174:   89:      state->supplyCount[estate] = 8;
      174:   90:      state->supplyCount[duchy] = 8;
      174:   91:      state->supplyCount[province] = 8;
      174:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      174:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      174:  102:  state->supplyCount[silver] = 40;
      174:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     7308:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 3480
branch  1 taken 174
        -:  107:    {
    57420:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 26970
branch  1 taken 1740
        -:  109:	    {
    26970:  110:	       if (kingdomCards[j] == i)
branch  0 taken 1740
branch  1 taken 25230
        -:  111:	       {
        -:  112:	          //check if card is a 'Victory' Kingdom card
     3480:  113:	          if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 1740
branch  1 taken 0
branch  2 taken 0
branch  3 taken 1740
        -:  114:		        {
    #####:  115:		            if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  116:		                state->supplyCount[i] = 8;
    #####:  117:		            }
        -:  118:		        else {
    #####:  119:              state->supplyCount[i] = 12; }
    #####:  120:		        }
        -:  121:	          else
        -:  122:		        {
     1740:  123:		            state->supplyCount[i] = 10;
        -:  124:		        }
     1740:  125:	          break;
        -:  126:	        }
        -:  127:	        else    //card is not in the set choosen for the game
        -:  128:	        {
    25230:  129:	           state->supplyCount[i] = -1;
        -:  130:	        }
    25230:  131:	       }
        -:  132:
     3480:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
     1044:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 348
branch  1 taken 174
        -:  140:    {
      348:  141:      state->deckCount[i] = 0;
     2784:  142:      for (j = 0; j < 3; j++)
branch  0 taken 1044
branch  1 taken 348
        -:  143:	{
     1044:  144:	  state->deck[i][j] = estate;
     1044:  145:	  state->deckCount[i]++;
     1044:  146:	}
     5568:  147:      for (j = 3; j < 10; j++)
branch  0 taken 2436
branch  1 taken 348
        -:  148:	{
     2436:  149:	  state->deck[i][j] = copper;
     2436:  150:	  state->deckCount[i]++;
     2436:  151:	}
      348:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
     1044:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 348
branch  1 taken 174
        -:  156:    {
      348:  157:      if ( shuffle(i, state) < 0 )
branch  0 taken 0
branch  1 taken 348
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
      348:  161:    }
        -:  162:
        -:  163:  //draw player hands
     1044:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 348
branch  1 taken 174
        -:  165:    {
        -:  166:      //initialize hand size to zero
      348:  167:      state->handCount[i] = 0;
      348:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
      348:  174:    }
        -:  175:
        -:  176:  //set embargo tokens to 0 for all supply piles
     9744:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 4698
branch  1 taken 174
        -:  178:    {
     4698:  179:      state->embargoTokens[i] = 0;
     4698:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
      174:  183:  state->outpostPlayed = 0;
      174:  184:  state->phase = 0;
      174:  185:  state->numActions = 1;
      174:  186:  state->numBuys = 1;
      174:  187:  state->playedCardCount = 0;
      174:  188:  state->whoseTurn = 0;
      174:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
     2088:  193:  for (it = 0; it < 5; it++){
branch  0 taken 870
branch  1 taken 174
      870:  194:    drawCard(state->whoseTurn, state);
      870:  195:  }
        -:  196:
      174:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
      174:  199:  return 0;
      174:  200:}
        -:  201:
function shuffle called 464 returned 100% blocks executed 100%
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      464:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      464:  209:  if (state->deckCount[player] < 1)
branch  0 taken 10
branch  1 taken 454
       10:  210:    return -1;
      454:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    58364:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 28728
branch  1 taken 454
    28728:  215:    card = floor(Random() * state->deckCount[player]);
    28728:  216:    newDeck[newDeckPos] = state->deck[player][card];
    28728:  217:    newDeckPos++;
  4282236:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 2112390
branch  1 taken 28728
  2112390:  219:      state->deck[player][i] = state->deck[player][i+1];
  2112390:  220:    }
    28728:  221:    state->deckCount[player]--;
        -:  222:  }
    58364:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 28728
branch  1 taken 454
    28728:  224:    state->deck[player][i] = newDeck[i];
    28728:  225:    state->deckCount[player]++;
    28728:  226:  }
        -:  227:
      454:  228:  return 0;
      464:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 136 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
      136:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 34 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       34:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 92%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
       24:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 10
branch  1 taken 2
       10:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       10:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
       10:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 2
branch  1 taken 0
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        2:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       24:  380:  for (k = 0; k < 5; k++){
branch  0 taken 10
branch  1 taken 2
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
       10:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 48 returned 100% blocks executed 92%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
       48:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 8
branch  1 taken 40
        -:  396:    {
        8:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       40:  401:  j = 0;
     2080:  402:  for (i = 0; i < 25; i++)
branch  0 taken 1000
branch  1 taken 40
        -:  403:  {
     1000:  404:    if (state->supplyCount[i] == 0) {
branch  0 taken 120
branch  1 taken 880
      120:  405:	     j++;
      120:  406:    }
     1000:  407:  }
       40:  408:  if ( j >= 3)
branch  0 taken 40
branch  1 taken 0
        -:  409:  {
       40:  410:    return 1;
        -:  411:  }
        -:  412:
    #####:  413:  return 0;
       48:  414:}
        -:  415:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    #####:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
        -:  473:	}
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
    #####:  483:	}
    #####:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
    #####:  494:	}
    #####:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
    #####:  504:	}
    #####:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
    #####:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
    #####:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 1072234 returned 100% blocks executed 100%
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
  1072234:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 112
branch  1 taken 1072122
        -:  528:
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
    50720:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 25248
branch  1 taken 112
    25248:  533:      state->deck[player][i] = state->discard[player][i];
    25248:  534:      state->discard[player][i] = -1;
    25248:  535:    }
        -:  536:
      112:  537:    state->deckCount[player] = state->discardCount[player];
      112:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
      112:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:
      112:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
      112:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:
      112:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
      112:  558:    if (deckCounter == 0)
branch  0 taken 6
branch  1 taken 106
        6:  559:      return -1;
        -:  560:
      106:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      106:  562:    state->deckCount[player]--;
      106:  563:    state->handCount[player]++;//Increment hand count
      106:  564:  }
        -:  565:
        -:  566:  else{
  1072122:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
  1072122:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1072122:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1072122:  575:    state->deckCount[player]--;
  1072122:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
  1072228:  579:  return 0;
  1072234:  580:}
        -:  581:
function getCost called 0 returned 0% blocks executed 0%
        -:  582:int getCost(int cardNumber)
        -:  583:{
    #####:  584:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo:
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:
    #####:  642:  return -1;
    #####:  643:}
        -:  644:
function callAdventurer called 6002 returned 100% blocks executed 100%
        -:  645:void callAdventurer(struct gameState *state, int currentPlayer, int temphand[])
        -:  646:{
        -:  647:  //printf("%s\n", "adventurer card played!");
     6002:  648:  int drawntreasure = 0;
     6002:  649:  int z = 0; // this is the counter for the temp hand
        -:  650:  //increased the drawTreasure to player would draw 5 treasure cards instead of 2.
  2074664:  651:  while(drawntreasure < 5)
branch  0 taken 1031330
branch  1 taken 6002
        -:  652:  {
  1031330:  653:    if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 4
branch  1 taken 1031326
        -:  654:      //if the deck is empty we need to shuffle discard and add to deck
        4:  655:      shuffle(currentPlayer, state);
        4:  656:    }
  1031330:  657:    drawCard(currentPlayer, state);
        -:  658:    //printf("past draw card\n");
  1031330:  659:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        -:  660:    //printf("top card is: %d\n", cardDrawn);
  3053862:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 1014618
branch  1 taken 16712
branch  2 taken 1007914
branch  3 taken 6704
branch  4 taken 6594
branch  5 taken 1001320
    30010:  662:      drawntreasure++;
    30010:  663:    }
        -:  664:    else {
  1001320:  665:      temphand[z]=cardDrawn;
        -:  666:      //changed -- to +++
  1001320:  667:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  668:      //moved the discard into where the top card is supposed to be removed.
        -:  669:      //state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];
  1001320:  670:      z++;
        -:  671:    }
        -:  672:
        -:  673:  }
        -:  674:
  2014644:  675:  while(z-1>=0) {
branch  0 taken 1001320
branch  1 taken 6002
  1001320:  676:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
  1001320:  677:    z=z-1;
        -:  678:  }
        -:  679:
     6002:  680:    return;
        -:  681:}
        -:  682:
        -:  683:
function callSmithy called 4002 returned 100% blocks executed 100%
        -:  684:void callSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  685:{
     4002:  686:  int i = 0;
        -:  687:  //+3 Cards
    48024:  688:  for (i = 0; i < 5; i++)
branch  0 taken 20010
branch  1 taken 4002
        -:  689:  {
    20010:  690:    drawCard(currentPlayer, state);
    20010:  691:  }
        -:  692:
     4002:  693:  discardCard(handPos, currentPlayer, state, 0);
     4002:  694:  return;
        -:  695:}
        -:  696:
function callCouncil_Room called 4002 returned 100% blocks executed 100%
        -:  697:void callCouncil_Room(struct gameState *state, int currentPlayer, int handPos)
        -:  698:{
     4002:  699:  int i = 0;
        -:  700:  //+4 Cards
    40020:  701:  for (i = 0; i < 4; i++)
branch  0 taken 16008
branch  1 taken 4002
        -:  702:  {
    16008:  703:    drawCard(currentPlayer, state);
    16008:  704:  }
        -:  705:
        -:  706:
        -:  707:  //+1 Buy
     4002:  708:  state->numBuys++;
        -:  709:
        -:  710:  //Each other player draws a card
    24012:  711:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 8004
branch  1 taken 4002
        -:  712:  {
        -:  713:  //changed if loop to while
     8004:  714:    if ( i != currentPlayer )
branch  0 taken 4002
branch  1 taken 4002
        -:  715:    {
     4002:  716:      drawCard(i, state);
     4002:  717:      i++;
     4002:  718:    }
     8004:  719:  }
        -:  720:
        -:  721:  //put played card in played card pile
     4002:  722:  discardCard(handPos, currentPlayer, state, 0);
     4002:  723:}
        -:  724:
function callBaron called 6 returned 100% blocks executed 92%
        -:  725:void callBaron(struct gameState *state, int choice1, int currentPlayer)
        -:  726:{
        6:  727:  state->numBuys++;//Increase buys by 1!
        -:  728:
        -:  729:  //Boolean true or going to discard an estate
        6:  730:  if (choice1 > 0) {
branch  0 taken 4
branch  1 taken 2
        4:  731:     int p = 0;//Iterator for hand!
        4:  732:     int card_not_discarded = 1;//Flag for discard set!
        -:  733:
       28:  734:      while(card_not_discarded){
branch  0 taken 10
branch  1 taken 4
       10:  735:         if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 taken 2
branch  1 taken 8
        2:  736:            state->coins += 4;//Add 4 coins to the amount of coins
        2:  737:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        2:  738:            state->discardCount[currentPlayer]++;
        -:  739:
       16:  740:            for (;p < state->handCount[currentPlayer]; p++)
branch  0 taken 6
branch  1 taken 2
        -:  741:            {
        6:  742:               state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        6:  743:            }
        -:  744:
        2:  745:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        2:  746:            state->handCount[currentPlayer]--;
        2:  747:            card_not_discarded = 0; //Exit the loop
        2:  748:         }
        -:  749:
        8:  750:        else if (p > state->handCount[currentPlayer]) {
branch  0 taken 2
branch  1 taken 6
        -:  751:          if(DEBUG) {
        -:  752:            printf("No estate cards in your hand, invalid choice\n");
        -:  753:            printf("Must gain an estate if there are any\n");
        -:  754:          }
        2:  755:          if (supplyCount(estate, state) > 0){
branch  0 taken 2
branch  1 taken 0
        2:  756:            gainCard(estate, state, 0, currentPlayer);
        2:  757:            state->supplyCount[estate]--;//Decrement estates
        2:  758:            if (supplyCount(estate, state) == 0){
branch  0 taken 0
branch  1 taken 2
    #####:  759:                isGameOver(state);
    #####:  760:            }
        2:  761:          }
        2:  762:          card_not_discarded = 0;//Exit the loop
        2:  763:        }
        -:  764:
        -:  765:        else{
        6:  766:          p++;//Next card
        -:  767:        }
        -:  768:      }
        4:  769:  }
        -:  770:
        -:  771:  //choose not to discard an estate and instead gain an estate card
        -:  772:  else {
        2:  773:     if (supplyCount(estate, state) > 0){
branch  0 taken 2
branch  1 taken 0
        2:  774:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
        2:  775:        state->supplyCount[estate]--;//Decrement Estates
        2:  776:        if (supplyCount(estate, state) == 0){
branch  0 taken 0
branch  1 taken 2
    #####:  777:           isGameOver(state);
    #####:  778:        }
        2:  779:     }
        -:  780:  }
        6:  781:}
        -:  782:
function callMinion called 0 returned 0% blocks executed 0%
        -:  783:void callMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  784:{
    #####:  785:  int i = 0;
    #####:  786:  int j = 0;
        -:  787:  //bug: redefine currentPlayer to 0
    #####:  788:  currentPlayer = 0;
        -:  789:
        -:  790:  //+1 action
    #####:  791:  state->numActions++;
        -:  792:
        -:  793:  //discard card from hand
    #####:  794:  discardCard(handPos, currentPlayer, state, 0);
        -:  795:
    #####:  796:  if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  797:  {
    #####:  798:    state->coins = state->coins + 2;
    #####:  799:  }
        -:  800:
    #####:  801:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  802:  {
        -:  803:    //discard hand
    #####:  804:    while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  805:    {
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
        -:  807:    }
        -:  808:
        -:  809:    //draw 4
    #####:  810:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  811:    {
    #####:  812:      drawCard(currentPlayer, state);
    #####:  813:    }
        -:  814:
        -:  815:    //other players discard hand and redraw if hand size > 4
    #####:  816:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  817:    {
    #####:  818:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  819:      {
    #####:  820:        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  821:        {
        -:  822:          //discard hand
        -:  823:          //introduce bug - instead of discardCard just decrement the handCount
    #####:  824:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  825:          {
        -:  826:            //discardCard(handPos, i, state, 0);
    #####:  827:            state->handCount[i]--;
        -:  828:          }
        -:  829:
        -:  830:          //draw 4
    #####:  831:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  832:          {
    #####:  833:            drawCard(i, state);
    #####:  834:          }
    #####:  835:        }
    #####:  836:      }
    #####:  837:    }
    #####:  838:  }
    #####:  839:  return;
        -:  840:}
        -:  841:
function cardEffect called 12 returned 100% blocks executed 4%
        -:  842:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  843:{
        -:  844:  int i;
        -:  845:  int j;
        -:  846:  int k;
        -:  847:  int x;
        -:  848:  int index;
       12:  849:  int currentPlayer = whoseTurn(state);
       12:  850:  int nextPlayer = currentPlayer + 1;
        -:  851:
       12:  852:  int tributeRevealedCards[2] = {-1, -1};
        -:  853:  int temphand[MAX_HAND];// moved above the if statement
        -:  854:  //int drawntreasure=0;
        -:  855:  //int cardDrawn;
        -:  856:  //int z = 0;// this is the counter for the temp hand
       12:  857:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0
branch  1 taken 12
    #####:  858:    nextPlayer = 0;
    #####:  859:  }
        -:  860:
        -:  861:  //uses switch to select card and perform actions
       12:  862:  switch( card )
branch  0 taken 2
branch  1 taken 2
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 2
branch  7 taken 0
branch  8 taken 6
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  863:    {
        -:  864:    case adventurer:
        2:  865:      callAdventurer(state, currentPlayer, temphand);
        2:  866:      return 0;
        -:  867:
        -:  868:    case council_room:
        2:  869:      callCouncil_Room(state, currentPlayer, handPos);
        -:  870:    /*
        -:  871:      //+4 Cards
        -:  872:      for (i = 0; i < 4; i++)
        -:  873:	{
        -:  874:	  drawCard(currentPlayer, state);
        -:  875:	}
        -:  876:
        -:  877:      //+1 Buy
        -:  878:      state->numBuys++;
        -:  879:
        -:  880:      //Each other player draws a card
        -:  881:      for (i = 0; i < state->numPlayers; i++)
        -:  882:	{
        -:  883:	  if ( i != currentPlayer )
        -:  884:	    {
        -:  885:	      drawCard(i, state);
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:      //put played card in played card pile
        -:  890:      discardCard(handPos, currentPlayer, state, 0);
        -:  891:      */
        2:  892:      return 0;
        -:  893:
        -:  894:    case feast:
        -:  895:      //gain card with cost up to 5
        -:  896:      //Backup hand
    #####:  897:      for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  898:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  899:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  900:      }
        -:  901:      //Backup hand
        -:  902:
        -:  903:      //Update Coins for Buy
    #####:  904:      updateCoins(currentPlayer, state, 5);
    #####:  905:      x = 1;//Condition to loop on
    #####:  906:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  907:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  908:	  if (DEBUG)
        -:  909:	    printf("None of that card left, sorry!\n");
        -:  910:
        -:  911:	  if (DEBUG){
        -:  912:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  913:	  }
    #####:  914:	}
    #####:  915:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  916:	  printf("That card is too expensive!\n");
        -:  917:
        -:  918:	  if (DEBUG){
        -:  919:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  920:	  }
    #####:  921:	}
        -:  922:	else{
        -:  923:
        -:  924:	  if (DEBUG){
        -:  925:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  926:	  }
        -:  927:
    #####:  928:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  929:	  x = 0;//No more buying cards
        -:  930:
        -:  931:	  if (DEBUG){
        -:  932:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  933:	  }
        -:  934:
        -:  935:	}
        -:  936:      }
        -:  937:
        -:  938:      //Reset Hand
    #####:  939:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  940:	state->hand[currentPlayer][i] = temphand[i];
    #####:  941:	temphand[i] = -1;
    #####:  942:      }
        -:  943:      //Reset Hand
        -:  944:
    #####:  945:      return 0;
        -:  946:
        -:  947:    case gardens:
    #####:  948:      return -1;
        -:  949:
        -:  950:    case mine:
    #####:  951:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  952:
    #####:  953:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  959:	{
    #####:  960:	  return -1;
        -:  961:	}
        -:  962:
    #####:  963:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  964:	{
    #####:  965:	  return -1;
        -:  966:	}
        -:  967:
    #####:  968:      gainCard(choice2, state, 2, currentPlayer);
        -:  969:
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
        -:  972:
        -:  973:      //discard trashed card
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      discardCard(i, currentPlayer, state, 0);
    #####:  979:	      break;
        -:  980:	    }
    #####:  981:	}
        -:  982:
    #####:  983:      return 0;
        -:  984:
        -:  985:    case remodel:
    #####:  986:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  987:
    #####:  988:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  989:	{
    #####:  990:	  return -1;
        -:  991:	}
        -:  992:
    #####:  993:      gainCard(choice2, state, 0, currentPlayer);
        -:  994:
        -:  995:      //discard card from hand
    #####:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:
        -:  998:      //discard trashed card
    #####:  999:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      discardCard(i, currentPlayer, state, 0);
    #####: 1004:	      break;
        -: 1005:	    }
    #####: 1006:	}
        -: 1007:
        -: 1008:
    #####: 1009:      return 0;
        -: 1010:
        -: 1011:    case smithy:
        2: 1012:      callSmithy(state, currentPlayer, handPos);
        2: 1013:      return 0;
        -: 1014:
        -: 1015:    case village:
        -: 1016:      //+1 Card
    #####: 1017:      drawCard(currentPlayer, state);
        -: 1018:
        -: 1019:      //+2 Actions
    #####: 1020:      state->numActions = state->numActions + 2;
        -: 1021:
        -: 1022:      //discard played card from hand
    #####: 1023:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1024:      return 0;
        -: 1025:
        -: 1026:    case baron:
        6: 1027:      callBaron(state, choice1, currentPlayer);
        -: 1028:    /*
        -: 1029:      state->numBuys++;//Increase buys by 1!
        -: 1030:
        -: 1031:      //Boolean true or going to discard an estate
        -: 1032:      if (choice1 > 0) {
        -: 1033:	       int p = 0;//Iterator for hand!
        -: 1034:	       int card_not_discarded = 1;//Flag for discard set!
        -: 1035:
        -: 1036:	        while(card_not_discarded){
        -: 1037:	           if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
        -: 1038:	              state->coins += 4;//Add 4 coins to the amount of coins
        -: 1039:	              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1040:	              state->discardCount[currentPlayer]++;
        -: 1041:
        -: 1042:        	      for (;p < state->handCount[currentPlayer]; p++)
        -: 1043:                {
        -: 1044:        	         state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1045:        	      }
        -: 1046:
        -: 1047:        	      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1048:        	      state->handCount[currentPlayer]--;
        -: 1049:        	      card_not_discarded = 0; //Exit the loop
        -: 1050:	           }
        -: 1051:
        -: 1052:        	  else if (p > state->handCount[currentPlayer]) {
        -: 1053:        	    if(DEBUG) {
        -: 1054:        	      printf("No estate cards in your hand, invalid choice\n");
        -: 1055:        	      printf("Must gain an estate if there are any\n");
        -: 1056:        	    }
        -: 1057:        	    if (supplyCount(estate, state) > 0){
        -: 1058:        	      gainCard(estate, state, 0, currentPlayer);
        -: 1059:        	      state->supplyCount[estate]--;//Decrement estates
        -: 1060:        	      if (supplyCount(estate, state) == 0){
        -: 1061:        		        isGameOver(state);
        -: 1062:        	      }
        -: 1063:        	    }
        -: 1064:        	    card_not_discarded = 0;//Exit the loop
        -: 1065:        	  }
        -: 1066:
        -: 1067:        	  else{
        -: 1068:        	    p++;//Next card
        -: 1069:        	  }
        -: 1070:        	}
        -: 1071:      }
        -: 1072:
        -: 1073:      //choose not to discard an estate and instead gain an estate card
        -: 1074:      else {
        -: 1075:	       if (supplyCount(estate, state) > 0){
        -: 1076:	          gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1077:	          state->supplyCount[estate]--;//Decrement Estates
        -: 1078:	          if (supplyCount(estate, state) == 0){
        -: 1079:	             isGameOver(state);
        -: 1080:	          }
        -: 1081:	       }
        -: 1082:      }
        -: 1083:
        -: 1084:      */
        6: 1085:      return 0;
        -: 1086:
        -: 1087:    case great_hall:
        -: 1088:      //+1 Card
    #####: 1089:      drawCard(currentPlayer, state);
        -: 1090:
        -: 1091:      //+1 Actions
    #####: 1092:      state->numActions++;
        -: 1093:
        -: 1094:      //discard card from hand
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1096:      return 0;
        -: 1097:
        -: 1098:    case minion:
    #####: 1099:      callMinion(state, choice1, choice2, currentPlayer, handPos);
        -: 1100:
        -: 1101:    /*
        -: 1102:      //+1 action
        -: 1103:      state->numActions++;
        -: 1104:
        -: 1105:      //discard card from hand
        -: 1106:      discardCard(handPos, currentPlayer, state, 0);
        -: 1107:
        -: 1108:      if (choice1)		//+2 coins
        -: 1109:	{
        -: 1110:	  state->coins = state->coins + 2;
        -: 1111:	}
        -: 1112:
        -: 1113:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1114:	{
        -: 1115:	  //discard hand
        -: 1116:	  while(numHandCards(state) > 0)
        -: 1117:	    {
        -: 1118:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1119:	    }
        -: 1120:
        -: 1121:	  //draw 4
        -: 1122:	  for (i = 0; i < 4; i++)
        -: 1123:	    {
        -: 1124:	      drawCard(currentPlayer, state);
        -: 1125:	    }
        -: 1126:
        -: 1127:	  //other players discard hand and redraw if hand size > 4
        -: 1128:	  for (i = 0; i < state->numPlayers; i++)
        -: 1129:	    {
        -: 1130:	      if (i != currentPlayer)
        -: 1131:		{
        -: 1132:		  if ( state->handCount[i] > 4 )
        -: 1133:		    {
        -: 1134:		      //discard hand
        -: 1135:		      while( state->handCount[i] > 0 )
        -: 1136:			{
        -: 1137:			  discardCard(handPos, i, state, 0);
        -: 1138:			}
        -: 1139:
        -: 1140:		      //draw 4
        -: 1141:		      for (j = 0; j < 4; j++)
        -: 1142:			{
        -: 1143:			  drawCard(i, state);
        -: 1144:			}
        -: 1145:		    }
        -: 1146:		}
        -: 1147:	    }
        -: 1148:
        -: 1149:	}
        -: 1150:  */
    #####: 1151:      return 0;
        -: 1152:
        -: 1153:    case steward:
    #####: 1154:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //+2 cards
    #####: 1157:	  drawCard(currentPlayer, state);
    #####: 1158:	  drawCard(currentPlayer, state);
    #####: 1159:	}
    #####: 1160:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1161:	{
        -: 1162:	  //+2 coins
    #####: 1163:	  state->coins = state->coins + 2;
    #####: 1164:	}
        -: 1165:      else
        -: 1166:	{
        -: 1167:	  //trash 2 cards in hand
    #####: 1168:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1169:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1170:	}
        -: 1171:
        -: 1172:      //discard card from hand
    #####: 1173:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1174:      return 0;
        -: 1175:
        -: 1176:    case tribute:
    #####: 1177:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1178:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1179:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1180:	  state->deckCount[nextPlayer]--;
    #####: 1181:	}
    #####: 1182:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1183:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1184:	  state->discardCount[nextPlayer]--;
    #####: 1185:	}
        -: 1186:	else{
        -: 1187:	  //No Card to Reveal
        -: 1188:	  if (DEBUG){
        -: 1189:	    printf("No cards to reveal\n");
        -: 1190:	  }
        -: 1191:	}
    #####: 1192:      }
        -: 1193:
        -: 1194:      else{
    #####: 1195:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1196:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1197:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1198:	    state->deckCount[nextPlayer]++;
    #####: 1199:	    state->discard[nextPlayer][i] = -1;
    #####: 1200:	    state->discardCount[nextPlayer]--;
    #####: 1201:	  }
        -: 1202:
    #####: 1203:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1204:	}
    #####: 1205:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1206:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1207:	state->deckCount[nextPlayer]--;
    #####: 1208:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1209:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1210:	state->deckCount[nextPlayer]--;
        -: 1211:      }
        -: 1212:
    #####: 1213:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1214:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1215:	state->playedCardCount++;
    #####: 1216:	tributeRevealedCards[1] = -1;
    #####: 1217:      }
        -: 1218:
    #####: 1219:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1220:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1221:	  state->coins += 2;
    #####: 1222:	}
        -: 1223:
    #####: 1224:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1225:	  drawCard(currentPlayer, state);
    #####: 1226:	  drawCard(currentPlayer, state);
    #####: 1227:	}
        -: 1228:	else{//Action Card
    #####: 1229:	  state->numActions = state->numActions + 2;
        -: 1230:	}
    #####: 1231:      }
        -: 1232:
    #####: 1233:      return 0;
        -: 1234:
        -: 1235:    case ambassador:
    #####: 1236:      j = 0;		//used to check if player has enough cards to discard
        -: 1237:
    #####: 1238:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1239:	{
    #####: 1240:	  return -1;
        -: 1241:	}
        -: 1242:
    #####: 1243:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1244:	{
    #####: 1245:	  return -1;
        -: 1246:	}
        -: 1247:
    #####: 1248:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1249:	{
    #####: 1250:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1251:	    {
    #####: 1252:	      j++;
    #####: 1253:	    }
    #####: 1254:	}
    #####: 1255:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1256:	{
    #####: 1257:	  return -1;
        -: 1258:	}
        -: 1259:
        -: 1260:      if (DEBUG)
        -: 1261:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1262:
        -: 1263:      //increase supply count for choosen card by amount being discarded
    #####: 1264:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1265:
        -: 1266:      //each other player gains a copy of revealed card
    #####: 1267:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:	{
    #####: 1269:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1270:	    {
    #####: 1271:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1272:	    }
    #####: 1273:	}
        -: 1274:
        -: 1275:      //discard played card from hand
    #####: 1276:      discardCard(handPos, currentPlayer, state, 0);
        -: 1277:
        -: 1278:      //trash copies of cards returned to supply
    #####: 1279:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1280:	{
    #####: 1281:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1282:	    {
    #####: 1283:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1284:		{
    #####: 1285:		  discardCard(i, currentPlayer, state, 1);
    #####: 1286:		  break;
        -: 1287:		}
    #####: 1288:	    }
    #####: 1289:	}
        -: 1290:
    #####: 1291:      return 0;
        -: 1292:
        -: 1293:    case cutpurse:
        -: 1294:
    #####: 1295:      updateCoins(currentPlayer, state, 2);
    #####: 1296:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1297:	{
    #####: 1298:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1299:	    {
    #####: 1300:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1301:		{
    #####: 1302:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1303:		    {
    #####: 1304:		      discardCard(j, i, state, 0);
    #####: 1305:		      break;
        -: 1306:		    }
    #####: 1307:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1308:		    {
    #####: 1309:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1310:			{
        -: 1311:			  if (DEBUG)
        -: 1312:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1313:			}
    #####: 1314:		      break;
        -: 1315:		    }
    #####: 1316:		}
        -: 1317:
    #####: 1318:	    }
        -: 1319:
    #####: 1320:	}
        -: 1321:
        -: 1322:      //discard played card from hand
    #####: 1323:      discardCard(handPos, currentPlayer, state, 0);
        -: 1324:
    #####: 1325:      return 0;
        -: 1326:
        -: 1327:
        -: 1328:    case embargo:
        -: 1329:      //+2 Coins
    #####: 1330:      state->coins = state->coins + 2;
        -: 1331:
        -: 1332:      //see if selected pile is in play
    #####: 1333:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1334:	{
    #####: 1335:	  return -1;
        -: 1336:	}
        -: 1337:
        -: 1338:      //add embargo token to selected supply pile
    #####: 1339:      state->embargoTokens[choice1]++;
        -: 1340:
        -: 1341:      //trash card
    #####: 1342:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1343:      return 0;
        -: 1344:
        -: 1345:    case outpost:
        -: 1346:      //set outpost flag
    #####: 1347:      state->outpostPlayed++;
        -: 1348:
        -: 1349:      //discard card
    #####: 1350:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1351:      return 0;
        -: 1352:
        -: 1353:    case salvager:
        -: 1354:      //+1 buy
    #####: 1355:      state->numBuys++;
        -: 1356:
    #####: 1357:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1358:	{
        -: 1359:	  //gain coins equal to trashed card
    #####: 1360:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1361:	  //trash card
    #####: 1362:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1363:	}
        -: 1364:
        -: 1365:      //discard card
    #####: 1366:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1367:      return 0;
        -: 1368:
        -: 1369:    case sea_hag:
    #####: 1370:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1371:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1372:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1373:	  state->discardCount[i]++;
    #####: 1374:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1375:	}
    #####: 1376:      }
    #####: 1377:      return 0;
        -: 1378:
        -: 1379:    case treasure_map:
        -: 1380:      //search hand for another treasure_map
    #####: 1381:      index = -1;
    #####: 1382:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1383:	{
    #####: 1384:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1385:	    {
    #####: 1386:	      index = i;
    #####: 1387:	      break;
        -: 1388:	    }
    #####: 1389:	}
    #####: 1390:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1391:	{
        -: 1392:	  //trash both treasure cards
    #####: 1393:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1394:	  discardCard(index, currentPlayer, state, 1);
        -: 1395:
        -: 1396:	  //gain 4 Gold cards
    #####: 1397:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1398:	    {
    #####: 1399:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1400:	    }
        -: 1401:
        -: 1402:	  //return success
    #####: 1403:	  return 1;
        -: 1404:	}
        -: 1405:
        -: 1406:      //no second treasure_map found in hand
    #####: 1407:      return -1;
        -: 1408:    }
        -: 1409:
    #####: 1410:  return -1;
       12: 1411:}
        -: 1412:
function discardCard called 8004 returned 100% blocks executed 80%
        -: 1413:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1414:{
        -: 1415:
        -: 1416:  //if card is not trashed, added to Played pile
     8004: 1417:  if (trashFlag < 1)
branch  0 taken 8004
branch  1 taken 0
        -: 1418:    {
        -: 1419:      //add card to played pile
     8004: 1420:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     8004: 1421:      state->playedCardCount++;
     8004: 1422:    }
        -: 1423:
        -: 1424:  //set played card to -1
     8004: 1425:  state->hand[currentPlayer][handPos] = -1;
        -: 1426:
        -: 1427:  //remove card from player's hand
     8004: 1428:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0
branch  1 taken 8004
        -: 1429:    {
        -: 1430:      //reduce number of cards in hand
    #####: 1431:      state->handCount[currentPlayer]--;
    #####: 1432:    }
     8004: 1433:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0
branch  1 taken 8004
        -: 1434:    {
        -: 1435:      //reduce number of cards in hand
    #####: 1436:      state->handCount[currentPlayer]--;
    #####: 1437:    }
        -: 1438:  else
        -: 1439:    {
        -: 1440:      //replace discarded card with last card in hand
     8004: 1441:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1442:      //set last card to -1
     8004: 1443:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1444:      //reduce number of cards in hand
     8004: 1445:      state->handCount[currentPlayer]--;
        -: 1446:    }
        -: 1447:
     8004: 1448:  return 0;
        -: 1449:}
        -: 1450:
function gainCard called 128 returned 100% blocks executed 100%
        -: 1451:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1452:{
        -: 1453:  //Note: supplyPos is enum of choosen card
        -: 1454:
        -: 1455:  //check if supply pile is empty (0) or card is not used in game (-1)
      128: 1456:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 22
branch  1 taken 106
        -: 1457:    {
       22: 1458:      return -1;
        -: 1459:    }
        -: 1460:
        -: 1461:  //added card for [whoseTurn] current player:
        -: 1462:  // toFlag = 0 : add to discard
        -: 1463:  // toFlag = 1 : add to deck
        -: 1464:  // toFlag = 2 : add to hand
        -: 1465:
      106: 1466:  if (toFlag == 1)
branch  0 taken 34
branch  1 taken 72
        -: 1467:    {
       34: 1468:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       34: 1469:      state->deckCount[player]++;
       34: 1470:    }
       72: 1471:  else if (toFlag == 2)
branch  0 taken 34
branch  1 taken 38
        -: 1472:    {
       34: 1473:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       34: 1474:      state->handCount[player]++;
       34: 1475:    }
        -: 1476:  else
        -: 1477:    {
       38: 1478:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       38: 1479:      state->discardCount[player]++;
        -: 1480:    }
        -: 1481:
        -: 1482:  //decrease number in supply pile
      106: 1483:  state->supplyCount[supplyPos]--;
        -: 1484:
      106: 1485:  return 0;
      128: 1486:}
        -: 1487:
function updateCoins called 176 returned 100% blocks executed 85%
        -: 1488:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1489:{
        -: 1490:  int i;
        -: 1491:
        -: 1492:  //reset coin count
      176: 1493:  state->coins = 0;
        -: 1494:
        -: 1495:  //add coins for each Treasure card in player's hand
     2112: 1496:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 880
branch  1 taken 176
        -: 1497:    {
      880: 1498:      if (state->hand[player][i] == copper)
branch  0 taken 702
branch  1 taken 178
        -: 1499:	{
      702: 1500:	  state->coins += 1;
      702: 1501:	}
      178: 1502:      else if (state->hand[player][i] == silver)
branch  0 taken 0
branch  1 taken 178
        -: 1503:	{
    #####: 1504:	  state->coins += 2;
    #####: 1505:	}
      178: 1506:      else if (state->hand[player][i] == gold)
branch  0 taken 0
branch  1 taken 178
        -: 1507:	{
    #####: 1508:	  state->coins += 3;
    #####: 1509:	}
      880: 1510:    }
        -: 1511:
        -: 1512:  //add bonus
      176: 1513:  state->coins += bonus;
        -: 1514:
      176: 1515:  return 0;
        -: 1516:}
        -: 1517:
        -: 1518:
        -: 1519://end of dominion.c
