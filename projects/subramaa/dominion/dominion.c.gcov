        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:43
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 12264 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
    12264:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0
branch  1 taken 12264
    #####:   10:    return 1;
    12264:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 4380
branch  1 taken 7884
     4380:   12:    return -1;
     7884:   13:  return 0;
    12264:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 438 returned 100% blocks executed 83%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
      438:   44:  SelectStream(1);
      438:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      876:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 438
branch  1 taken 0
branch  2 taken 0
branch  3 taken 438
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      438:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     9636:   57:  for (i = 0; i < 10; i++)
branch  0 taken 4380
branch  1 taken 438
        -:   58:    {
    96360:   59:      for (j = 0; j < 10; j++)
branch  0 taken 43800
branch  1 taken 4380
        -:   60:        {
    83220:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 39420
branch  1 taken 4380
branch  2 taken 0
branch  3 taken 39420
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    43800:   65:        }
     4380:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      438:   73:  if (numPlayers == 2)
branch  0 taken 438
branch  1 taken 0
        -:   74:    {
      438:   75:      state->supplyCount[curse] = 10;
      438:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      438:   87:  if (numPlayers == 2)
branch  0 taken 438
branch  1 taken 0
        -:   88:    {
      438:   89:      state->supplyCount[estate] = 8;
      438:   90:      state->supplyCount[duchy] = 8;
      438:   91:      state->supplyCount[province] = 8;
      438:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      438:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      438:  102:  state->supplyCount[silver] = 40;
      438:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    18396:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 8760
branch  1 taken 438
        -:  107:    {
   144540:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 67890
branch  1 taken 4380
        -:  109:	    {
    67890:  110:	       if (kingdomCards[j] == i)
branch  0 taken 4380
branch  1 taken 63510
        -:  111:	       {
        -:  112:	          //check if card is a 'Victory' Kingdom card
     8760:  113:	          if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 4380
branch  1 taken 0
branch  2 taken 0
branch  3 taken 4380
        -:  114:		        {
    #####:  115:		            if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  116:		                state->supplyCount[i] = 8;
    #####:  117:		            }
        -:  118:		        else {
    #####:  119:              state->supplyCount[i] = 12; }
    #####:  120:		        }
        -:  121:	          else
        -:  122:		        {
     4380:  123:		            state->supplyCount[i] = 10;
        -:  124:		        }
     4380:  125:	          break;
        -:  126:	        }
        -:  127:	        else    //card is not in the set choosen for the game
        -:  128:	        {
    63510:  129:	           state->supplyCount[i] = -1;
        -:  130:	        }
    63510:  131:	       }
        -:  132:
     8760:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
     2628:  139:  for (i = 0; i < numPlayers; i++)
branch  0 taken 876
branch  1 taken 438
        -:  140:    {
      876:  141:      state->deckCount[i] = 0;
     7008:  142:      for (j = 0; j < 3; j++)
branch  0 taken 2628
branch  1 taken 876
        -:  143:	{
     2628:  144:	  state->deck[i][j] = estate;
     2628:  145:	  state->deckCount[i]++;
     2628:  146:	}
    14016:  147:      for (j = 3; j < 10; j++)
branch  0 taken 6132
branch  1 taken 876
        -:  148:	{
     6132:  149:	  state->deck[i][j] = copper;
     6132:  150:	  state->deckCount[i]++;
     6132:  151:	}
      876:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
     2628:  155:  for (i = 0; i < numPlayers; i++)
branch  0 taken 876
branch  1 taken 438
        -:  156:    {
      876:  157:      if ( shuffle(i, state) < 0 )
branch  0 taken 0
branch  1 taken 876
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
      876:  161:    }
        -:  162:
        -:  163:  //draw player hands
     2628:  164:  for (i = 0; i < numPlayers; i++)
branch  0 taken 876
branch  1 taken 438
        -:  165:    {
        -:  166:      //initialize hand size to zero
      876:  167:      state->handCount[i] = 0;
      876:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
      876:  174:    }
        -:  175:
        -:  176:  //set embargo tokens to 0 for all supply piles
    24528:  177:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 11826
branch  1 taken 438
        -:  178:    {
    11826:  179:      state->embargoTokens[i] = 0;
    11826:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
      438:  183:  state->outpostPlayed = 0;
      438:  184:  state->phase = 0;
      438:  185:  state->numActions = 1;
      438:  186:  state->numBuys = 1;
      438:  187:  state->playedCardCount = 0;
      438:  188:  state->whoseTurn = 0;
      438:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
     5256:  193:  for (it = 0; it < 5; it++){
branch  0 taken 2190
branch  1 taken 438
     2190:  194:    drawCard(state->whoseTurn, state);
     2190:  195:  }
        -:  196:
      438:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
      438:  199:  return 0;
      438:  200:}
        -:  201:
function shuffle called 896 returned 100% blocks executed 100%
        -:  202:int shuffle(int player, struct gameState *state) {
        -:  203:
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
      896:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
      896:  210:  if (state->deckCount[player] < 1)
branch  0 taken 20
branch  1 taken 876
       20:  211:    return -1;
      876:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    19272:  215:  while (state->deckCount[player] > 0) {
branch  0 taken 8760
branch  1 taken 876
     8760:  216:    card = floor(Random() * state->deckCount[player]);
     8760:  217:    newDeck[newDeckPos] = state->deck[player][card];
     8760:  218:    newDeckPos++;
    61320:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 21900
branch  1 taken 8760
    21900:  220:      state->deck[player][i] = state->deck[player][i+1];
    21900:  221:    }
     8760:  222:    state->deckCount[player]--;
        -:  223:  }
    19272:  224:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 8760
branch  1 taken 876
     8760:  225:    state->deck[player][i] = newDeck[i];
     8760:  226:    state->deckCount[player]++;
     8760:  227:  }
        -:  228:
      876:  229:  return 0;
      896:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
        -:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  233:{
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:
    #####:  270:  return 0;
    #####:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
        -:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:
    #####:  309:  return 0;
    #####:  310:}
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
        -:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 340 returned 100% blocks executed 100%
        -:  321:int supplyCount(int card, struct gameState *state) {
      340:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 91 returned 100% blocks executed 100%
        -:  347:int whoseTurn(struct gameState *state) {
       91:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 5 returned 100% blocks executed 92%
        -:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
        5:  354:  int currentPlayer = whoseTurn(state);
        -:  355:
        -:  356:  //Discard hand
       60:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 25
branch  1 taken 5
       25:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       25:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
       25:  360:  }
        5:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:  //Code for determining the player
        5:  364:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 5
branch  1 taken 0
        5:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        5:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
        5:  371:  state->outpostPlayed = 0;
        5:  372:  state->phase = 0;
        5:  373:  state->numActions = 1;
        5:  374:  state->coins = 0;
        5:  375:  state->numBuys = 1;
        5:  376:  state->playedCardCount = 0;
        5:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
       60:  381:  for (k = 0; k < 5; k++){
branch  0 taken 25
branch  1 taken 5
       25:  382:    drawCard(state->whoseTurn, state);//Draw a card
       25:  383:  }
        -:  384:
        -:  385:  //Update money
        5:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
        5:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 120 returned 100% blocks executed 92%
        -:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:
        -:  395:  //if stack of Province cards is empty, the game ends
      120:  396:  if (state->supplyCount[province] == 0)
branch  0 taken 20
branch  1 taken 100
        -:  397:    {
       20:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
      100:  402:  j = 0;
     5200:  403:  for (i = 0; i < 25; i++)
branch  0 taken 2500
branch  1 taken 100
        -:  404:  {
     2500:  405:    if (state->supplyCount[i] == 0) {
branch  0 taken 300
branch  1 taken 2200
      300:  406:	     j++;
      300:  407:    }
     2500:  408:  }
      100:  409:  if ( j >= 3)
branch  0 taken 100
branch  1 taken 0
        -:  410:  {
      100:  411:    return 1;
        -:  412:  }
        -:  413:
    #####:  414:  return 0;
      120:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 2325 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2325:  528:  if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 10
branch  1 taken 2315
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       20:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0
branch  1 taken 10
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
       10:  538:    state->deckCount[player] = state->discardCount[player];
       10:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       10:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       10:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       10:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       10:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       10:  559:    if (deckCounter == 0)
branch  0 taken 10
branch  1 taken 0
       10:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
     2315:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     2315:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2315:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2315:  576:    state->deckCount[player]--;
     2315:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     2315:  580:  return 0;
     2325:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function callAdventurer called 5 returned 100% blocks executed 100%
        -:  646:void callAdventurer(struct gameState *state, int currentPlayer, int temphand[])
        -:  647:{
        -:  648:  //printf("%s\n", "adventurer card played!");
        5:  649:  int drawntreasure = 0;
        5:  650:  int z = 0; // this is the counter for the temp hand
        -:  651:  //increased the drawTreasure to player would draw 5 treasure cards instead of 2.
       80:  652:  while(drawntreasure < 5)
branch  0 taken 35
branch  1 taken 5
        -:  653:  {
       35:  654:    if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 10
branch  1 taken 25
        -:  655:      //if the deck is empty we need to shuffle discard and add to deck
       10:  656:      shuffle(currentPlayer, state);
       10:  657:    }
       35:  658:    drawCard(currentPlayer, state);
        -:  659:
       35:  660:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
       55:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 10
branch  1 taken 25
branch  2 taken 10
branch  3 taken 0
branch  4 taken 0
branch  5 taken 10
       25:  662:      drawntreasure++;
       25:  663:    }
        -:  664:    else {
       10:  665:      temphand[z]=cardDrawn;
        -:  666:      //changed -- to +++
       10:  667:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  668:      //moved the discard into where the top card is supposed to be removed.
        -:  669:      //state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];
       10:  670:      z++;
        -:  671:    }
        -:  672:  }
        -:  673:
       30:  674:  while(z-1>=0) {
branch  0 taken 10
branch  1 taken 5
       10:  675:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
       10:  676:    z=z-1;
        -:  677:  }
        -:  678:
        5:  679:    return;
        -:  680:}
        -:  681:
        -:  682:
function callSmithy called 8 returned 100% blocks executed 100%
        -:  683:void callSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  684:{
        8:  685:  int i = 0;
        -:  686:  //+3 Cards
       96:  687:  for (i = 0; i < 5; i++)
branch  0 taken 40
branch  1 taken 8
        -:  688:  {
       40:  689:    drawCard(currentPlayer, state);
       40:  690:  }
        -:  691:
        -:  692:  //discard card from hand
        8:  693:  discardCard(handPos, currentPlayer, state, 0);
        8:  694:  return;
        -:  695:}
        -:  696:
function callCouncil_Room called 5 returned 100% blocks executed 100%
        -:  697:void callCouncil_Room(struct gameState *state, int currentPlayer, int handPos)
        -:  698:{
        5:  699:  int i = 0;
        -:  700:  //+4 Cards
       50:  701:  for (i = 0; i < 4; i++)
branch  0 taken 20
branch  1 taken 5
        -:  702:  {
       20:  703:    drawCard(currentPlayer, state);
       20:  704:  }
        -:  705:
        -:  706:  //+1 Buy
        5:  707:  state->numBuys++;
        -:  708:
        -:  709:  //Each other player draws a card
       30:  710:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 10
branch  1 taken 5
        -:  711:  {
        -:  712:  //changed if loop to while
       10:  713:    if ( i != currentPlayer )
branch  0 taken 5
branch  1 taken 5
        -:  714:    {
        5:  715:      drawCard(i, state);
        5:  716:      i++;
        5:  717:    }
       10:  718:  }
        -:  719:
        -:  720:  //put played card in played card pile
        5:  721:  discardCard(handPos, currentPlayer, state, 0);
        5:  722:}
        -:  723:
function callBaron called 15 returned 100% blocks executed 92%
        -:  724:void callBaron(struct gameState *state, int choice1, int currentPlayer)
        -:  725:{
       15:  726:  state->numBuys++;//Increase buys by 1!
        -:  727:
        -:  728:  //Boolean true or going to discard an estate
       15:  729:  if (choice1 > 0) {
branch  0 taken 10
branch  1 taken 5
       10:  730:     int p = 0;//Iterator for hand!
       10:  731:     int card_not_discarded = 1;//Flag for discard set!
        -:  732:
       70:  733:      while(card_not_discarded){
branch  0 taken 25
branch  1 taken 10
       25:  734:         if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 taken 5
branch  1 taken 20
        5:  735:            state->coins += 4;//Add 4 coins to the amount of coins
        5:  736:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        5:  737:            state->discardCount[currentPlayer]++;
        -:  738:
       40:  739:            for (;p < state->handCount[currentPlayer]; p++)
branch  0 taken 15
branch  1 taken 5
        -:  740:            {
       15:  741:               state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
       15:  742:            }
        -:  743:
        5:  744:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        5:  745:            state->handCount[currentPlayer]--;
        5:  746:            card_not_discarded = 0; //Exit the loop
        5:  747:         }
        -:  748:
       20:  749:        else if (p > state->handCount[currentPlayer]) {
branch  0 taken 5
branch  1 taken 15
        -:  750:          if(DEBUG) {
        -:  751:            printf("No estate cards in your hand, invalid choice\n");
        -:  752:            printf("Must gain an estate if there are any\n");
        -:  753:          }
        5:  754:          if (supplyCount(estate, state) > 0){
branch  0 taken 5
branch  1 taken 0
        5:  755:            gainCard(estate, state, 0, currentPlayer);
        5:  756:            state->supplyCount[estate]--;//Decrement estates
        5:  757:            if (supplyCount(estate, state) == 0){
branch  0 taken 0
branch  1 taken 5
    #####:  758:                isGameOver(state);
    #####:  759:            }
        5:  760:          }
        5:  761:          card_not_discarded = 0;//Exit the loop
        5:  762:        }
        -:  763:
        -:  764:        else{
       15:  765:          p++;//Next card
        -:  766:        }
        -:  767:      }
       10:  768:  }
        -:  769:
        -:  770:  //choose not to discard an estate and instead gain an estate card
        -:  771:  else {
        5:  772:     if (supplyCount(estate, state) > 0){
branch  0 taken 5
branch  1 taken 0
        5:  773:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
        5:  774:        state->supplyCount[estate]--;//Decrement Estates
        5:  775:        if (supplyCount(estate, state) == 0){
branch  0 taken 0
branch  1 taken 5
    #####:  776:           isGameOver(state);
    #####:  777:        }
        5:  778:     }
        -:  779:  }
       15:  780:}
        -:  781:
function callMinion called 0 returned 0% blocks executed 0%
        -:  782:void callMinion(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos)
        -:  783:{
    #####:  784:  int i = 0;
    #####:  785:  int j = 0;
        -:  786:  //bug: redefine currentPlayer to 0
    #####:  787:  currentPlayer = 0;
        -:  788:
        -:  789:  //+1 action
    #####:  790:  state->numActions++;
        -:  791:
        -:  792:  //discard card from hand
    #####:  793:  discardCard(handPos, currentPlayer, state, 0);
        -:  794:
    #####:  795:  if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  796:  {
    #####:  797:    state->coins = state->coins + 2;
    #####:  798:  }
        -:  799:
    #####:  800:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  801:  {
        -:  802:    //discard hand
    #####:  803:    while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  804:    {
    #####:  805:      discardCard(handPos, currentPlayer, state, 0);
        -:  806:    }
        -:  807:
        -:  808:    //draw 4
    #####:  809:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:    {
    #####:  811:      drawCard(currentPlayer, state);
    #####:  812:    }
        -:  813:
        -:  814:    //other players discard hand and redraw if hand size > 4
    #####:  815:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  816:    {
    #####:  817:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  818:      {
    #####:  819:        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  820:        {
        -:  821:          //discard hand
        -:  822:          //introduce bug - instead of discardCard just decrement the handCount
    #####:  823:          while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  824:          {
        -:  825:            //discardCard(handPos, i, state, 0);
    #####:  826:            state->handCount[i]--;
        -:  827:          }
        -:  828:
        -:  829:          //draw 4
    #####:  830:          for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  831:          {
    #####:  832:            drawCard(i, state);
    #####:  833:          }
    #####:  834:        }
    #####:  835:      }
    #####:  836:    }
    #####:  837:  }
    #####:  838:  return;
        -:  839:}
        -:  840:
function cardEffect called 33 returned 100% blocks executed 4%
        -:  841:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  842:{
        -:  843:  int i;
        -:  844:  int j;
        -:  845:  int k;
        -:  846:  int x;
        -:  847:  int index;
       33:  848:  int currentPlayer = whoseTurn(state);
       33:  849:  int nextPlayer = currentPlayer + 1;
        -:  850:
       33:  851:  int tributeRevealedCards[2] = {-1, -1};
        -:  852:  int temphand[MAX_HAND];// moved above the if statement
        -:  853:  //int drawntreasure=0;
        -:  854:  //int cardDrawn;
        -:  855:  //int z = 0;// this is the counter for the temp hand
       33:  856:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0
branch  1 taken 33
    #####:  857:    nextPlayer = 0;
    #####:  858:  }
        -:  859:
        -:  860:  //uses switch to select card and perform actions
       33:  861:  switch( card )
branch  0 taken 5
branch  1 taken 5
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 8
branch  7 taken 0
branch  8 taken 15
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  862:    {
        -:  863:    case adventurer:
        5:  864:      callAdventurer(state, currentPlayer, temphand);
        5:  865:      return 0;
        -:  866:
        -:  867:    case council_room:
        5:  868:      callCouncil_Room(state, currentPlayer, handPos);
        -:  869:    /*
        -:  870:      //+4 Cards
        -:  871:      for (i = 0; i < 4; i++)
        -:  872:	{
        -:  873:	  drawCard(currentPlayer, state);
        -:  874:	}
        -:  875:
        -:  876:      //+1 Buy
        -:  877:      state->numBuys++;
        -:  878:
        -:  879:      //Each other player draws a card
        -:  880:      for (i = 0; i < state->numPlayers; i++)
        -:  881:	{
        -:  882:	  if ( i != currentPlayer )
        -:  883:	    {
        -:  884:	      drawCard(i, state);
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:      //put played card in played card pile
        -:  889:      discardCard(handPos, currentPlayer, state, 0);
        -:  890:      */
        5:  891:      return 0;
        -:  892:
        -:  893:    case feast:
        -:  894:      //gain card with cost up to 5
        -:  895:      //Backup hand
    #####:  896:      for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  897:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  898:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  899:      }
        -:  900:      //Backup hand
        -:  901:
        -:  902:      //Update Coins for Buy
    #####:  903:      updateCoins(currentPlayer, state, 5);
    #####:  904:      x = 1;//Condition to loop on
    #####:  905:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  906:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  907:	  if (DEBUG)
        -:  908:	    printf("None of that card left, sorry!\n");
        -:  909:
        -:  910:	  if (DEBUG){
        -:  911:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  912:	  }
    #####:  913:	}
    #####:  914:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  915:	  printf("That card is too expensive!\n");
        -:  916:
        -:  917:	  if (DEBUG){
        -:  918:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  919:	  }
    #####:  920:	}
        -:  921:	else{
        -:  922:
        -:  923:	  if (DEBUG){
        -:  924:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  925:	  }
        -:  926:
    #####:  927:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  928:	  x = 0;//No more buying cards
        -:  929:
        -:  930:	  if (DEBUG){
        -:  931:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  932:	  }
        -:  933:
        -:  934:	}
        -:  935:      }
        -:  936:
        -:  937:      //Reset Hand
    #####:  938:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  939:	state->hand[currentPlayer][i] = temphand[i];
    #####:  940:	temphand[i] = -1;
    #####:  941:      }
        -:  942:      //Reset Hand
        -:  943:
    #####:  944:      return 0;
        -:  945:
        -:  946:    case gardens:
    #####:  947:      return -1;
        -:  948:
        -:  949:    case mine:
    #####:  950:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  951:
    #####:  952:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  953:	{
    #####:  954:	  return -1;
        -:  955:	}
        -:  956:
    #####:  957:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  return -1;
        -:  965:	}
        -:  966:
    #####:  967:      gainCard(choice2, state, 2, currentPlayer);
        -:  968:
        -:  969:      //discard card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);
        -:  971:
        -:  972:      //discard trashed card
    #####:  973:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	{
    #####:  975:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  976:	    {
    #####:  977:	      discardCard(i, currentPlayer, state, 0);
    #####:  978:	      break;
        -:  979:	    }
    #####:  980:	}
        -:  981:
    #####:  982:      return 0;
        -:  983:
        -:  984:    case remodel:
    #####:  985:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  986:
    #####:  987:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  return -1;
        -:  990:	}
        -:  991:
    #####:  992:      gainCard(choice2, state, 0, currentPlayer);
        -:  993:
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
        -:  996:
        -:  997:      //discard trashed card
    #####:  998:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1001:	    {
    #####: 1002:	      discardCard(i, currentPlayer, state, 0);
    #####: 1003:	      break;
        -: 1004:	    }
    #####: 1005:	}
        -: 1006:
        -: 1007:
    #####: 1008:      return 0;
        -: 1009:
        -: 1010:    case smithy:
        8: 1011:      callSmithy(state, currentPlayer, handPos);
        8: 1012:      return 0;
        -: 1013:
        -: 1014:    case village:
        -: 1015:      //+1 Card
    #####: 1016:      drawCard(currentPlayer, state);
        -: 1017:
        -: 1018:      //+2 Actions
    #####: 1019:      state->numActions = state->numActions + 2;
        -: 1020:
        -: 1021:      //discard played card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1023:      return 0;
        -: 1024:
        -: 1025:    case baron:
       15: 1026:      callBaron(state, choice1, currentPlayer);
        -: 1027:    /*
        -: 1028:      state->numBuys++;//Increase buys by 1!
        -: 1029:
        -: 1030:      //Boolean true or going to discard an estate
        -: 1031:      if (choice1 > 0) {
        -: 1032:	       int p = 0;//Iterator for hand!
        -: 1033:	       int card_not_discarded = 1;//Flag for discard set!
        -: 1034:
        -: 1035:	        while(card_not_discarded){
        -: 1036:	           if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
        -: 1037:	              state->coins += 4;//Add 4 coins to the amount of coins
        -: 1038:	              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1039:	              state->discardCount[currentPlayer]++;
        -: 1040:
        -: 1041:        	      for (;p < state->handCount[currentPlayer]; p++)
        -: 1042:                {
        -: 1043:        	         state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1044:        	      }
        -: 1045:
        -: 1046:        	      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1047:        	      state->handCount[currentPlayer]--;
        -: 1048:        	      card_not_discarded = 0; //Exit the loop
        -: 1049:	           }
        -: 1050:
        -: 1051:        	  else if (p > state->handCount[currentPlayer]) {
        -: 1052:        	    if(DEBUG) {
        -: 1053:        	      printf("No estate cards in your hand, invalid choice\n");
        -: 1054:        	      printf("Must gain an estate if there are any\n");
        -: 1055:        	    }
        -: 1056:        	    if (supplyCount(estate, state) > 0){
        -: 1057:        	      gainCard(estate, state, 0, currentPlayer);
        -: 1058:        	      state->supplyCount[estate]--;//Decrement estates
        -: 1059:        	      if (supplyCount(estate, state) == 0){
        -: 1060:        		        isGameOver(state);
        -: 1061:        	      }
        -: 1062:        	    }
        -: 1063:        	    card_not_discarded = 0;//Exit the loop
        -: 1064:        	  }
        -: 1065:
        -: 1066:        	  else{
        -: 1067:        	    p++;//Next card
        -: 1068:        	  }
        -: 1069:        	}
        -: 1070:      }
        -: 1071:
        -: 1072:      //choose not to discard an estate and instead gain an estate card
        -: 1073:      else {
        -: 1074:	       if (supplyCount(estate, state) > 0){
        -: 1075:	          gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1076:	          state->supplyCount[estate]--;//Decrement Estates
        -: 1077:	          if (supplyCount(estate, state) == 0){
        -: 1078:	             isGameOver(state);
        -: 1079:	          }
        -: 1080:	       }
        -: 1081:      }
        -: 1082:
        -: 1083:      */
       15: 1084:      return 0;
        -: 1085:
        -: 1086:    case great_hall:
        -: 1087:      //+1 Card
    #####: 1088:      drawCard(currentPlayer, state);
        -: 1089:
        -: 1090:      //+1 Actions
    #####: 1091:      state->numActions++;
        -: 1092:
        -: 1093:      //discard card from hand
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1095:      return 0;
        -: 1096:
        -: 1097:    case minion:
    #####: 1098:      callMinion(state, choice1, choice2, currentPlayer, handPos);
        -: 1099:
        -: 1100:    /*
        -: 1101:      //+1 action
        -: 1102:      state->numActions++;
        -: 1103:
        -: 1104:      //discard card from hand
        -: 1105:      discardCard(handPos, currentPlayer, state, 0);
        -: 1106:
        -: 1107:      if (choice1)		//+2 coins
        -: 1108:	{
        -: 1109:	  state->coins = state->coins + 2;
        -: 1110:	}
        -: 1111:
        -: 1112:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1113:	{
        -: 1114:	  //discard hand
        -: 1115:	  while(numHandCards(state) > 0)
        -: 1116:	    {
        -: 1117:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1118:	    }
        -: 1119:
        -: 1120:	  //draw 4
        -: 1121:	  for (i = 0; i < 4; i++)
        -: 1122:	    {
        -: 1123:	      drawCard(currentPlayer, state);
        -: 1124:	    }
        -: 1125:
        -: 1126:	  //other players discard hand and redraw if hand size > 4
        -: 1127:	  for (i = 0; i < state->numPlayers; i++)
        -: 1128:	    {
        -: 1129:	      if (i != currentPlayer)
        -: 1130:		{
        -: 1131:		  if ( state->handCount[i] > 4 )
        -: 1132:		    {
        -: 1133:		      //discard hand
        -: 1134:		      while( state->handCount[i] > 0 )
        -: 1135:			{
        -: 1136:			  discardCard(handPos, i, state, 0);
        -: 1137:			}
        -: 1138:
        -: 1139:		      //draw 4
        -: 1140:		      for (j = 0; j < 4; j++)
        -: 1141:			{
        -: 1142:			  drawCard(i, state);
        -: 1143:			}
        -: 1144:		    }
        -: 1145:		}
        -: 1146:	    }
        -: 1147:
        -: 1148:	}
        -: 1149:  */
    #####: 1150:      return 0;
        -: 1151:
        -: 1152:    case steward:
    #####: 1153:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
        -: 1155:	  //+2 cards
    #####: 1156:	  drawCard(currentPlayer, state);
    #####: 1157:	  drawCard(currentPlayer, state);
    #####: 1158:	}
    #####: 1159:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1160:	{
        -: 1161:	  //+2 coins
    #####: 1162:	  state->coins = state->coins + 2;
    #####: 1163:	}
        -: 1164:      else
        -: 1165:	{
        -: 1166:	  //trash 2 cards in hand
    #####: 1167:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1168:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1169:	}
        -: 1170:
        -: 1171:      //discard card from hand
    #####: 1172:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:    case tribute:
    #####: 1176:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1177:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1178:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1179:	  state->deckCount[nextPlayer]--;
    #####: 1180:	}
    #####: 1181:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1182:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1183:	  state->discardCount[nextPlayer]--;
    #####: 1184:	}
        -: 1185:	else{
        -: 1186:	  //No Card to Reveal
        -: 1187:	  if (DEBUG){
        -: 1188:	    printf("No cards to reveal\n");
        -: 1189:	  }
        -: 1190:	}
    #####: 1191:      }
        -: 1192:
        -: 1193:      else{
    #####: 1194:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1195:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1196:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1197:	    state->deckCount[nextPlayer]++;
    #####: 1198:	    state->discard[nextPlayer][i] = -1;
    #####: 1199:	    state->discardCount[nextPlayer]--;
    #####: 1200:	  }
        -: 1201:
    #####: 1202:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1203:	}
    #####: 1204:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1205:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1206:	state->deckCount[nextPlayer]--;
    #####: 1207:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1208:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1209:	state->deckCount[nextPlayer]--;
        -: 1210:      }
        -: 1211:
    #####: 1212:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1213:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1214:	state->playedCardCount++;
    #####: 1215:	tributeRevealedCards[1] = -1;
    #####: 1216:      }
        -: 1217:
    #####: 1218:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1219:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1220:	  state->coins += 2;
    #####: 1221:	}
        -: 1222:
    #####: 1223:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1224:	  drawCard(currentPlayer, state);
    #####: 1225:	  drawCard(currentPlayer, state);
    #####: 1226:	}
        -: 1227:	else{//Action Card
    #####: 1228:	  state->numActions = state->numActions + 2;
        -: 1229:	}
    #####: 1230:      }
        -: 1231:
    #####: 1232:      return 0;
        -: 1233:
        -: 1234:    case ambassador:
    #####: 1235:      j = 0;		//used to check if player has enough cards to discard
        -: 1236:
    #####: 1237:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1238:	{
    #####: 1239:	  return -1;
        -: 1240:	}
        -: 1241:
    #####: 1242:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1243:	{
    #####: 1244:	  return -1;
        -: 1245:	}
        -: 1246:
    #####: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
    #####: 1249:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1250:	    {
    #####: 1251:	      j++;
    #####: 1252:	    }
    #####: 1253:	}
    #####: 1254:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1255:	{
    #####: 1256:	  return -1;
        -: 1257:	}
        -: 1258:
        -: 1259:      if (DEBUG)
        -: 1260:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1261:
        -: 1262:      //increase supply count for choosen card by amount being discarded
    #####: 1263:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1264:
        -: 1265:      //each other player gains a copy of revealed card
    #####: 1266:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1267:	{
    #####: 1268:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1269:	    {
    #####: 1270:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1271:	    }
    #####: 1272:	}
        -: 1273:
        -: 1274:      //discard played card from hand
    #####: 1275:      discardCard(handPos, currentPlayer, state, 0);
        -: 1276:
        -: 1277:      //trash copies of cards returned to supply
    #####: 1278:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1279:	{
    #####: 1280:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1281:	    {
    #####: 1282:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1283:		{
    #####: 1284:		  discardCard(i, currentPlayer, state, 1);
    #####: 1285:		  break;
        -: 1286:		}
    #####: 1287:	    }
    #####: 1288:	}
        -: 1289:
    #####: 1290:      return 0;
        -: 1291:
        -: 1292:    case cutpurse:
        -: 1293:
    #####: 1294:      updateCoins(currentPlayer, state, 2);
    #####: 1295:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1296:	{
    #####: 1297:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1298:	    {
    #####: 1299:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1300:		{
    #####: 1301:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1302:		    {
    #####: 1303:		      discardCard(j, i, state, 0);
    #####: 1304:		      break;
        -: 1305:		    }
    #####: 1306:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1307:		    {
    #####: 1308:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1309:			{
        -: 1310:			  if (DEBUG)
        -: 1311:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1312:			}
    #####: 1313:		      break;
        -: 1314:		    }
    #####: 1315:		}
        -: 1316:
    #####: 1317:	    }
        -: 1318:
    #####: 1319:	}
        -: 1320:
        -: 1321:      //discard played card from hand
    #####: 1322:      discardCard(handPos, currentPlayer, state, 0);
        -: 1323:
    #####: 1324:      return 0;
        -: 1325:
        -: 1326:
        -: 1327:    case embargo:
        -: 1328:      //+2 Coins
    #####: 1329:      state->coins = state->coins + 2;
        -: 1330:
        -: 1331:      //see if selected pile is in play
    #####: 1332:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  return -1;
        -: 1335:	}
        -: 1336:
        -: 1337:      //add embargo token to selected supply pile
    #####: 1338:      state->embargoTokens[choice1]++;
        -: 1339:
        -: 1340:      //trash card
    #####: 1341:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1342:      return 0;
        -: 1343:
        -: 1344:    case outpost:
        -: 1345:      //set outpost flag
    #####: 1346:      state->outpostPlayed++;
        -: 1347:
        -: 1348:      //discard card
    #####: 1349:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1350:      return 0;
        -: 1351:
        -: 1352:    case salvager:
        -: 1353:      //+1 buy
    #####: 1354:      state->numBuys++;
        -: 1355:
    #####: 1356:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1357:	{
        -: 1358:	  //gain coins equal to trashed card
    #####: 1359:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1360:	  //trash card
    #####: 1361:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1362:	}
        -: 1363:
        -: 1364:      //discard card
    #####: 1365:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1366:      return 0;
        -: 1367:
        -: 1368:    case sea_hag:
    #####: 1369:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1370:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1371:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1372:	  state->discardCount[i]++;
    #####: 1373:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1374:	}
    #####: 1375:      }
    #####: 1376:      return 0;
        -: 1377:
        -: 1378:    case treasure_map:
        -: 1379:      //search hand for another treasure_map
    #####: 1380:      index = -1;
    #####: 1381:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1382:	{
    #####: 1383:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1384:	    {
    #####: 1385:	      index = i;
    #####: 1386:	      break;
        -: 1387:	    }
    #####: 1388:	}
    #####: 1389:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1390:	{
        -: 1391:	  //trash both treasure cards
    #####: 1392:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1393:	  discardCard(index, currentPlayer, state, 1);
        -: 1394:
        -: 1395:	  //gain 4 Gold cards
    #####: 1396:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1397:	    {
    #####: 1398:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1399:	    }
        -: 1400:
        -: 1401:	  //return success
    #####: 1402:	  return 1;
        -: 1403:	}
        -: 1404:
        -: 1405:      //no second treasure_map found in hand
    #####: 1406:      return -1;
        -: 1407:    }
        -: 1408:
    #####: 1409:  return -1;
       33: 1410:}
        -: 1411:
function discardCard called 13 returned 100% blocks executed 80%
        -: 1412:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1413:{
        -: 1414:
        -: 1415:  //if card is not trashed, added to Played pile
       13: 1416:  if (trashFlag < 1)
branch  0 taken 13
branch  1 taken 0
        -: 1417:    {
        -: 1418:      //add card to played pile
       13: 1419:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       13: 1420:      state->playedCardCount++;
       13: 1421:    }
        -: 1422:
        -: 1423:  //set played card to -1
       13: 1424:  state->hand[currentPlayer][handPos] = -1;
        -: 1425:
        -: 1426:  //remove card from player's hand
       13: 1427:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0
branch  1 taken 13
        -: 1428:    {
        -: 1429:      //reduce number of cards in hand
    #####: 1430:      state->handCount[currentPlayer]--;
    #####: 1431:    }
       13: 1432:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0
branch  1 taken 13
        -: 1433:    {
        -: 1434:      //reduce number of cards in hand
    #####: 1435:      state->handCount[currentPlayer]--;
    #####: 1436:    }
        -: 1437:  else
        -: 1438:    {
        -: 1439:      //replace discarded card with last card in hand
       13: 1440:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1441:      //set last card to -1
       13: 1442:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1443:      //reduce number of cards in hand
       13: 1444:      state->handCount[currentPlayer]--;
        -: 1445:    }
        -: 1446:
       13: 1447:  return 0;
        -: 1448:}
        -: 1449:
function gainCard called 320 returned 100% blocks executed 100%
        -: 1450:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1451:{
        -: 1452:  //Note: supplyPos is enum of choosen card
        -: 1453:
        -: 1454:  //check if supply pile is empty (0) or card is not used in game (-1)
      320: 1455:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 55
branch  1 taken 265
        -: 1456:    {
       55: 1457:      return -1;
        -: 1458:    }
        -: 1459:
        -: 1460:  //added card for [whoseTurn] current player:
        -: 1461:  // toFlag = 0 : add to discard
        -: 1462:  // toFlag = 1 : add to deck
        -: 1463:  // toFlag = 2 : add to hand
        -: 1464:
      265: 1465:  if (toFlag == 1)
branch  0 taken 85
branch  1 taken 180
        -: 1466:    {
       85: 1467:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       85: 1468:      state->deckCount[player]++;
       85: 1469:    }
      180: 1470:  else if (toFlag == 2)
branch  0 taken 85
branch  1 taken 95
        -: 1471:    {
       85: 1472:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       85: 1473:      state->handCount[player]++;
       85: 1474:    }
        -: 1475:  else
        -: 1476:    {
       95: 1477:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       95: 1478:      state->discardCount[player]++;
        -: 1479:    }
        -: 1480:
        -: 1481:  //decrease number in supply pile
      265: 1482:  state->supplyCount[supplyPos]--;
        -: 1483:
      265: 1484:  return 0;
      320: 1485:}
        -: 1486:
function updateCoins called 443 returned 100% blocks executed 85%
        -: 1487:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1488:{
        -: 1489:  int i;
        -: 1490:
        -: 1491:  //reset coin count
      443: 1492:  state->coins = 0;
        -: 1493:
        -: 1494:  //add coins for each Treasure card in player's hand
     5316: 1495:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 2215
branch  1 taken 443
        -: 1496:    {
     2215: 1497:      if (state->hand[player][i] == copper)
branch  0 taken 1767
branch  1 taken 448
        -: 1498:	{
     1767: 1499:	  state->coins += 1;
     1767: 1500:	}
      448: 1501:      else if (state->hand[player][i] == silver)
branch  0 taken 0
branch  1 taken 448
        -: 1502:	{
    #####: 1503:	  state->coins += 2;
    #####: 1504:	}
      448: 1505:      else if (state->hand[player][i] == gold)
branch  0 taken 0
branch  1 taken 448
        -: 1506:	{
    #####: 1507:	  state->coins += 3;
    #####: 1508:	}
     2215: 1509:    }
        -: 1510:
        -: 1511:  //add bonus
      443: 1512:  state->coins += bonus;
        -: 1513:
      443: 1514:  return 0;
        -: 1515:}
        -: 1516:
        -: 1517:
        -: 1518://end of dominion.c
